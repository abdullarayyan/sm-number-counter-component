{"ast":null,"code":"var _jsxFileName = \"/Users/user/grapesjs-editor/src/NumberCounterBlock.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport grapesjs from 'grapesjs';\nimport 'grapesjs/dist/css/grapes.min.css';\n// GrapesJSEditor.tsx\n// import React, { useEffect } from 'react';\n// import grapesjs from 'grapesjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GrapesJSEditor = () => {\n  _s();\n  useEffect(() => {\n    const editor = grapesjs.init({\n      container: '#gjs',\n      fromElement: true,\n      storageManager: {\n        type: 'local',\n        stepsBeforeSave: 1\n      },\n      blockManager: {\n        appendTo: '#blocks'\n      }\n    });\n    editor.DomComponents.addType('input', {\n      isComponent: el => el.tagName == 'INPUT',\n      model: {\n        defaults: {\n          traits: [\n          // Strings are automatically converted to text types\n          'name',\n          // Same as: { type: 'text', name: 'name' }\n          'placeholder', {\n            type: 'select',\n            // Type of the trait\n            label: 'Type',\n            // The label you will see in Settings\n            name: 'type',\n            // The name of the attribute/property to use on component\n            options: [{\n              id: 'text',\n              name: 'Text'\n            }, {\n              id: 'email',\n              name: 'Email'\n            }, {\n              id: 'password',\n              name: 'Password'\n            }, {\n              id: 'number',\n              name: 'Number'\n            }]\n          }, {\n            type: 'checkbox',\n            name: 'required'\n          }],\n          // As by default, traits are binded to attributes, so to define\n          // their initial value we can use attributes\n          attributes: {\n            type: 'text',\n            required: true\n          }\n        }\n      }\n    });\n    // Define the NumberCounter component\n    editor.Blocks.add('number-counter', {\n      label: 'NumberCounter',\n      attributes: {\n        class: 'fa fa-clock-o'\n      },\n      content: '<div data-gjs-type=\"number-counter\" data-gjs-draggable=\"true\">0</div>',\n      traits: [{\n        type: 'number',\n        name: 'start',\n        label: 'Start Value',\n        default: 0 // Default value for the trait\n      }, {\n        type: 'number',\n        name: 'end',\n        label: 'End Value',\n        default: 100 // Default value for the trait\n      }, {\n        type: 'number',\n        name: 'speed',\n        label: 'Speed (ms)',\n        default: 1000 // Default value for the trait\n      }, {\n        type: 'select',\n        name: 'direction',\n        label: 'Direction',\n        options: [{\n          value: 'up',\n          name: 'Up'\n        }, {\n          value: 'down',\n          name: 'Down'\n        }],\n        default: 'up' // Default value for the trait\n      }]\n    });\n\n    // Handle the event after a component is dragged and dropped\n    editor.on('component:drag:end', component => {\n      if (component.is('number-counter')) {\n        // Add your logic to set up the counter component here\n        const start = component.getTrait('start').get('value');\n        const end = component.getTrait('end').get('value');\n        const speed = component.getTrait('speed').get('value');\n        const direction = component.getTrait('direction').get('value');\n\n        // Your logic to set up the counter based on traits\n        console.log('Start:', start, 'End:', end, 'Speed:', speed, 'Direction:', direction);\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"gjs\",\n      style: {\n        height: '500px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"blocks\",\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(GrapesJSEditor, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = GrapesJSEditor;\nexport default GrapesJSEditor;\n\n// const GrapesJSEditor: React.FC = () => {\n//   useEffect(() => {\n//     const editor = grapesjs.init({\n//       container: '#gjs',\n//       fromElement: true,\n//       storageManager: {\n//         autosave: true,\n//         type: 'local',\n//         stepsBeforeSave: 1,\n//       },\n//       plugins: ['gjs-blocks-basic'], // Example: Basic Blocks plugin\n//       blockManager: {\n//         appendTo: '#blocks',\n//         blocks: [\n//           {\n//             id: 'number-counter',\n//             label: 'NumberCounter',\n//             attributes: { class: 'fa fa-clock-o' },\n//             content: '<div data-gjs-type=\"number-counter\">0</div>',\n//           },\n//         ],\n//       },\n//     });\n\n//     // Define the NumberCounter component and its logic\n//     editor.DomComponents.addType('number-counter', {\n//       model: {\n//         defaults: {\n//           tagName: 'div',\n//           content: '0',\n//           attributes: { class: 'number-counter' },\n//           start: 0,\n//           end: 100,\n//           speed: 1000,\n//           direction: 'up',\n//         },\n//       },\n//       init() {\n//         this.updateContent();\n//       },\n//       updated(prop, value) {\n//         if (prop === 'start' || prop === 'end' || prop === 'speed' || prop === 'direction') {\n//           this.updateContent();\n//         }\n//       },\n//       updateContent() {\n//         const { start, end, speed, direction } = this.get('attributes');\n//         this.set('content', String(start));\n\n//         let current = start;\n//         const increment = direction === 'up' ? 1 : -1;\n//         const interval = speed / Math.abs(end - start);\n\n//         const update = () => {\n//           current += increment;\n//           this.set('content', String(current));\n//           if ((direction === 'up' && current <= end) || (direction === 'down' && current >= end)) {\n//             setTimeout(update, interval);\n//           }\n//         };\n\n//         setTimeout(update, interval);\n//       },\n//     });\n\n//     // Add a trait for customizing the NumberCounter\n//     editor.TraitManager.addType('number-counter-options', {\n//       noValue: true,\n//       createInput: function (el) {\n//         const input = document.createElement('input');\n//         input.setAttribute('placeholder', 'Enter a value');\n//         input.value = el.innerHTML;\n//         return input;\n//       },\n//       onUpdate: function (el, value) {\n//         el.innerHTML = value;\n//       },\n//     });\n\n//     // Set traits for the NumberCounter component\n//     editor.on('component:selected', (component) => {\n//       if (component.is('number-counter')) {\n//         editor.TraitManager.addType('start', {\n//           type: 'number-counter-options',\n//           name: 'Start Value',\n//         });\n//         editor.TraitManager.addType('end', {\n//           type: 'number-counter-options',\n//           name: 'End Value',\n//         });\n//         editor.TraitManager.addType('speed', {\n//           type: 'number-counter-options',\n//           name: 'Speed',\n//         });\n//         editor.TraitManager.addType('direction', {\n//           type: 'number-counter-options',\n//           name: 'Direction',\n//         });\n//       }\n//     });\n\n//     // Add a blank canvas for users to start working on\n//     editor.setComponents('<div data-gjs-type=\"number-counter\">0</div>');\n//   }, []);\n\n//   return (\n//     <div>\n//       <div id=\"gjs\" style={{ height: '500px' }}></div>\n//       <div id=\"blocks\" style={{ display: 'none' }}></div>\n//     </div>\n//   );\n// };\n\n// export default GrapesJSEditor;\nvar _c;\n$RefreshReg$(_c, \"GrapesJSEditor\");","map":{"version":3,"names":["React","useEffect","grapesjs","jsxDEV","_jsxDEV","GrapesJSEditor","_s","editor","init","container","fromElement","storageManager","type","stepsBeforeSave","blockManager","appendTo","DomComponents","addType","isComponent","el","tagName","model","defaults","traits","label","name","options","id","attributes","required","Blocks","add","class","content","default","value","on","component","is","start","getTrait","get","end","speed","direction","console","log","children","style","height","fileName","_jsxFileName","lineNumber","columnNumber","display","_c","$RefreshReg$"],"sources":["/Users/user/grapesjs-editor/src/NumberCounterBlock.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport grapesjs from 'grapesjs';\nimport 'grapesjs/dist/css/grapes.min.css';\n// GrapesJSEditor.tsx\n// import React, { useEffect } from 'react';\n// import grapesjs from 'grapesjs';\n\nconst GrapesJSEditor: React.FC = () => {\n  useEffect(() => {\n    const editor = grapesjs.init({\n      container: '#gjs',\n      fromElement: true,\n      storageManager: {\n        type: 'local',\n        stepsBeforeSave: 1,\n      },\n      blockManager: {\n        appendTo: '#blocks',\n      },\n    });\n    editor.DomComponents.addType('input', {\n      isComponent: el => el.tagName == 'INPUT',\n      model: {\n        defaults: {\n          traits: [\n            // Strings are automatically converted to text types\n            'name', // Same as: { type: 'text', name: 'name' }\n            'placeholder',\n            {\n              type: 'select', // Type of the trait\n              label: 'Type', // The label you will see in Settings\n              name: 'type', // The name of the attribute/property to use on component\n              options: [\n                { id: 'text', name: 'Text'},\n                { id: 'email', name: 'Email'},\n                { id: 'password', name: 'Password'},\n                { id: 'number', name: 'Number'},\n              ]\n            }, {\n              type: 'checkbox',\n              name: 'required',\n          }],\n          // As by default, traits are binded to attributes, so to define\n          // their initial value we can use attributes\n          attributes: { type: 'text', required: true },\n        },\n      },\n  });\n    // Define the NumberCounter component\n    editor.Blocks.add('number-counter', {\n      label: 'NumberCounter',\n      attributes: { class: 'fa fa-clock-o' },\n      content: '<div data-gjs-type=\"number-counter\" data-gjs-draggable=\"true\">0</div>',\n      traits: [\n        {\n          type: 'number',\n          name: 'start',\n          label: 'Start Value',\n          default: 0, // Default value for the trait\n        },\n        {\n          type: 'number',\n          name: 'end',\n          label: 'End Value',\n          default: 100, // Default value for the trait\n        },\n        {\n          type: 'number',\n          name: 'speed',\n          label: 'Speed (ms)',\n          default: 1000, // Default value for the trait\n        },\n        {\n          type: 'select',\n          name: 'direction',\n          label: 'Direction',\n          options: [\n            { value: 'up', name: 'Up' },\n            { value: 'down', name: 'Down' },\n          ],\n          default: 'up', // Default value for the trait\n        },\n      ],\n    });\n\n    // Handle the event after a component is dragged and dropped\n    editor.on('component:drag:end', (component) => {\n      if (component.is('number-counter')) {\n        // Add your logic to set up the counter component here\n        const start = component.getTrait('start').get('value');\n        const end = component.getTrait('end').get('value');\n        const speed = component.getTrait('speed').get('value');\n        const direction = component.getTrait('direction').get('value');\n\n        // Your logic to set up the counter based on traits\n        console.log('Start:', start, 'End:', end, 'Speed:', speed, 'Direction:', direction);\n      }\n    });\n  }, []);\n\n  return (\n    <div>\n      <div id=\"gjs\" style={{ height: '500px' }}></div>\n      <div id=\"blocks\" style={{ display: 'none' }}></div>\n    </div>\n  );\n};\n\nexport default GrapesJSEditor;\n\n\n// const GrapesJSEditor: React.FC = () => {\n//   useEffect(() => {\n//     const editor = grapesjs.init({\n//       container: '#gjs',\n//       fromElement: true,\n//       storageManager: {\n//         autosave: true,\n//         type: 'local',\n//         stepsBeforeSave: 1,\n//       },\n//       plugins: ['gjs-blocks-basic'], // Example: Basic Blocks plugin\n//       blockManager: {\n//         appendTo: '#blocks',\n//         blocks: [\n//           {\n//             id: 'number-counter',\n//             label: 'NumberCounter',\n//             attributes: { class: 'fa fa-clock-o' },\n//             content: '<div data-gjs-type=\"number-counter\">0</div>',\n//           },\n//         ],\n//       },\n//     });\n\n//     // Define the NumberCounter component and its logic\n//     editor.DomComponents.addType('number-counter', {\n//       model: {\n//         defaults: {\n//           tagName: 'div',\n//           content: '0',\n//           attributes: { class: 'number-counter' },\n//           start: 0,\n//           end: 100,\n//           speed: 1000,\n//           direction: 'up',\n//         },\n//       },\n//       init() {\n//         this.updateContent();\n//       },\n//       updated(prop, value) {\n//         if (prop === 'start' || prop === 'end' || prop === 'speed' || prop === 'direction') {\n//           this.updateContent();\n//         }\n//       },\n//       updateContent() {\n//         const { start, end, speed, direction } = this.get('attributes');\n//         this.set('content', String(start));\n\n//         let current = start;\n//         const increment = direction === 'up' ? 1 : -1;\n//         const interval = speed / Math.abs(end - start);\n\n//         const update = () => {\n//           current += increment;\n//           this.set('content', String(current));\n//           if ((direction === 'up' && current <= end) || (direction === 'down' && current >= end)) {\n//             setTimeout(update, interval);\n//           }\n//         };\n\n//         setTimeout(update, interval);\n//       },\n//     });\n\n//     // Add a trait for customizing the NumberCounter\n//     editor.TraitManager.addType('number-counter-options', {\n//       noValue: true,\n//       createInput: function (el) {\n//         const input = document.createElement('input');\n//         input.setAttribute('placeholder', 'Enter a value');\n//         input.value = el.innerHTML;\n//         return input;\n//       },\n//       onUpdate: function (el, value) {\n//         el.innerHTML = value;\n//       },\n//     });\n\n//     // Set traits for the NumberCounter component\n//     editor.on('component:selected', (component) => {\n//       if (component.is('number-counter')) {\n//         editor.TraitManager.addType('start', {\n//           type: 'number-counter-options',\n//           name: 'Start Value',\n//         });\n//         editor.TraitManager.addType('end', {\n//           type: 'number-counter-options',\n//           name: 'End Value',\n//         });\n//         editor.TraitManager.addType('speed', {\n//           type: 'number-counter-options',\n//           name: 'Speed',\n//         });\n//         editor.TraitManager.addType('direction', {\n//           type: 'number-counter-options',\n//           name: 'Direction',\n//         });\n//       }\n//     });\n\n//     // Add a blank canvas for users to start working on\n//     editor.setComponents('<div data-gjs-type=\"number-counter\">0</div>');\n//   }, []);\n\n//   return (\n//     <div>\n//       <div id=\"gjs\" style={{ height: '500px' }}></div>\n//       <div id=\"blocks\" style={{ display: 'none' }}></div>\n//     </div>\n//   );\n// };\n\n// export default GrapesJSEditor;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}