{"ast":null,"code":"// CustomBlock.js\nimport grapesjs from 'grapesjs';\nfunction CustomBlockComponent(editor) {\n  editor.Blocks.add('custom-block', {\n    label: 'Custom Block',\n    content: '<div class=\"custom-block\">0</div>',\n    // Set initial content to '0'\n    category: 'Basic',\n    draggable: '.custom-block',\n    attributes: {\n      class: 'custom-block'\n    },\n    // Add a class for CSS customization\n\n    // Define traits for customization with initial values\n    traits: [{\n      type: 'number',\n      name: 'start',\n      label: 'Start Number',\n      value: 0\n    },\n    // Set initial value to 0\n    {\n      type: 'number',\n      name: 'end',\n      label: 'End Number',\n      value: 100\n    },\n    // Set initial value to 100\n    {\n      type: 'number',\n      name: 'speed',\n      label: 'Counting Speed',\n      value: 1000\n    },\n    // Set initial value to 1000 (milliseconds)\n    {\n      type: 'checkbox',\n      name: 'direction',\n      label: 'Count Up',\n      valueTrue: true,\n      valueFalse: false\n    },\n    // Set initial value to true (Count Up)\n    {\n      type: 'text',\n      name: 'prefix',\n      label: 'Prefix'\n    }, {\n      type: 'text',\n      name: 'suffix',\n      label: 'Suffix'\n    }, {\n      type: 'text',\n      name: 'separator',\n      label: 'Separator'\n    }]\n  });\n\n  // Run the counter logic after the block is added or modified\n  editor.on('block:drag:stop', block => {\n    if (block.get('name') === 'custom-block') {\n      // Access trait values correctly using block.getTrait method\n      const start = block.getTrait('start');\n      const end = block.getTrait('end');\n      const speed = block.getTrait('speed');\n      const direction = block.getTrait('direction');\n      const prefix = block.getTrait('prefix');\n      const suffix = block.getTrait('suffix');\n      const separator = block.getTrait('separator');\n      let currentNumber = start;\n      let increment = 1;\n      if (!direction) {\n        currentNumber = end;\n        increment = -1;\n      }\n\n      // Function to update the content\n      function updateContent() {\n        if (direction && currentNumber <= end || !direction && currentNumber >= start) {\n          // Update the block content and continue the counter if not reached the end or start\n          block.set('content', prefix + currentNumber + suffix);\n          block.trigger('change:content');\n          currentNumber += increment;\n          setTimeout(updateContent, speed);\n        }\n      }\n\n      // Start the counter\n      updateContent();\n    }\n  });\n}\n_c = CustomBlockComponent;\nexport default CustomBlockComponent;\nvar _c;\n$RefreshReg$(_c, \"CustomBlockComponent\");","map":{"version":3,"names":["grapesjs","CustomBlockComponent","editor","Blocks","add","label","content","category","draggable","attributes","class","traits","type","name","value","valueTrue","valueFalse","on","block","get","start","getTrait","end","speed","direction","prefix","suffix","separator","currentNumber","increment","updateContent","set","trigger","setTimeout","_c","$RefreshReg$"],"sources":["/Users/user/grapesjs-editor/src/CustomBlock.js"],"sourcesContent":["// CustomBlock.js\nimport grapesjs from 'grapesjs';\n\nfunction CustomBlockComponent(editor) {\n  editor.Blocks.add('custom-block', {\n    label: 'Custom Block',\n    content: '<div class=\"custom-block\">0</div>', // Set initial content to '0'\n    category: 'Basic',\n    draggable: '.custom-block',\n    attributes: { class: 'custom-block' }, // Add a class for CSS customization\n\n    // Define traits for customization with initial values\n    traits: [\n      { type: 'number', name: 'start', label: 'Start Number', value: 0 }, // Set initial value to 0\n      { type: 'number', name: 'end', label: 'End Number', value: 100 }, // Set initial value to 100\n      { type: 'number', name: 'speed', label: 'Counting Speed', value: 1000 }, // Set initial value to 1000 (milliseconds)\n      { type: 'checkbox', name: 'direction', label: 'Count Up', valueTrue: true, valueFalse: false }, // Set initial value to true (Count Up)\n      { type: 'text', name: 'prefix', label: 'Prefix' },\n      { type: 'text', name: 'suffix', label: 'Suffix' },\n      { type: 'text', name: 'separator', label: 'Separator' },\n    ],\n  });\n\n  // Run the counter logic after the block is added or modified\n  editor.on('block:drag:stop', (block) => {\n    if (block.get('name') === 'custom-block') {\n      // Access trait values correctly using block.getTrait method\n      const start = block.getTrait('start');\n      const end = block.getTrait('end');\n      const speed = block.getTrait('speed');\n      const direction = block.getTrait('direction');\n      const prefix = block.getTrait('prefix');\n      const suffix = block.getTrait('suffix');\n      const separator = block.getTrait('separator');\n\n      let currentNumber = start;\n      let increment = 1;\n\n      if (!direction) {\n        currentNumber = end;\n        increment = -1;\n      }\n\n      // Function to update the content\n      function updateContent() {\n        if ((direction && currentNumber <= end) || (!direction && currentNumber >= start)) {\n          // Update the block content and continue the counter if not reached the end or start\n          block.set('content', prefix + currentNumber + suffix);\n          block.trigger('change:content');\n          currentNumber += increment;\n          setTimeout(updateContent, speed);\n        }\n      }\n\n      // Start the counter\n      updateContent();\n    }\n  });\n}\n\nexport default CustomBlockComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}