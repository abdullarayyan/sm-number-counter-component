{"ast":null,"code":"var _jsxFileName = \"/Users/user/grapesjs-editor/src/NumberCounterBlock.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport grapesjs from 'grapesjs';\nimport 'grapesjs/dist/css/grapes.min.css';\n// GrapesJSEditor.tsx\n// import React, { useEffect } from 'react';\n// import grapesjs from 'grapesjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GrapesJSEditor = () => {\n  _s();\n  useEffect(() => {\n    const editor = grapesjs.init({\n      container: '#gjs',\n      fromElement: true,\n      storageManager: {\n        type: 'local'\n      },\n      plugins: ['gjs-blocks-basic']\n    });\n\n    // Define the NumberCounter component\n    editor.DomComponents.addType('number-counter', {\n      model: {\n        defaults: {\n          traits: [{\n            type: 'number',\n            name: 'start',\n            label: 'Start Value',\n            default: 0 // Default value for the trait\n          }, {\n            type: 'number',\n            name: 'end',\n            label: 'End Value',\n            default: 100 // Default value for the trait\n          }, {\n            type: 'number',\n            name: 'speed',\n            label: 'Speed (ms)',\n            default: 1000 // Default value for the trait\n          }, {\n            type: 'select',\n            name: 'direction',\n            label: 'Direction',\n            options: [{\n              value: 'up',\n              name: 'Up'\n            }, {\n              value: 'down',\n              name: 'Down'\n            }],\n            default: 'up' // Default value for the trait\n          }]\n        }\n      },\n\n      // label: 'NumberCounter',\n      // attributes: { class: 'fa fa-clock-o' },\n      // content: '<div data-gjs-type=\"number-counter\" data-gjs-draggable=\"true\">0</div>',\n      onUpdate({\n        component,\n        traits\n      }) {\n        console.log('xxx', traits, component);\n      }\n    });\n    editor.BlockManager.add('number-counter-block', {\n      label: 'NumberCounter',\n      attributes: {\n        class: 'fa fa-clock-o'\n      },\n      content: '<div data-gjs-type=\"number-counter\" data-gjs-draggable=\"true\">0</div>'\n    });\n\n    // editor.on('block:drag:start', (block) => { \n    //   console.log(block,'start')\n    //  });\n    //  editor.on('block:drag', (block) => { \n    //   console.log(block,'drag')\n    //   });\n    // const modal = editor.Modal;\n    // console.log(modal)\n    // editor.on('block:drag:stop', (component, block) => { \n    //   console.log(block,component.traits,'stop')\n    //   if (component.is('number-counter')) {\n    //     // Add your logic to set up the counter component here\n    //     // const start = component.getTrait('start').get('default');\n    //     // const end = component.getTrait('end').get('default');\n    //     // const speed = component.getTrait('speed').get('default');\n    //     // const direction = component.getTrait('direction').get('default');\n\n    //     // // Your logic to set up the counter based on traits\n    //     // console.log('Start:', start, 'End:', end, 'Speed:', speed, 'Direction:', direction);\n    //   }\n    //  });\n\n    // // Handle the event after a component is dragged and dropped\n    // editor.on('component:drag:end', (component) => {\n    //   console.log(component)\n    //   if (component.is('number-counter')) {\n    //     // Add your logic to set up the counter component here\n    //     const start = component.getTrait('start').get('value');\n    //     const end = component.getTrait('end').get('value');\n    //     const speed = component.getTrait('speed').get('value');\n    //     const direction = component.getTrait('direction').get('value');\n\n    //     // Your logic to set up the counter based on traits\n    //     console.log('Start:', start, 'End:', end, 'Speed:', speed, 'Direction:', direction);\n    //   }\n    // });\n\n    editor.on('block:drag:stop', component => {\n      if (component.is('number-counter')) {\n        // Get the trait values\n\n        let start = component.getTrait('start').get('default');\n        let end = component.getTrait('end').get('default');\n        let speed = component.getTrait('speed').get('default');\n        let direction = component.getTrait('direction').get('default');\n        console.log('Start:', start, 'End:', end, 'Speed:', speed, 'Direction:', direction);\n\n        // Access the counter component\n        const counterElement = component.view.el;\n\n        // Reset the counter's content\n        counterElement.innerHTML = direction === 'up' ? start : end;\n\n        // Function to update the counter\n        const updateCounter = () => {\n          console.log('Start:', start, 'End:', end, 'Speed:', speed, 'Direction:', direction);\n          const current = parseInt(counterElement.innerHTML, 10);\n          console.log(current, 'current');\n          if (direction === 'up' && current < end || direction === 'down' && current > end) {\n            counterElement.innerHTML = direction === 'up' ? current + 1 : current - 1;\n            setTimeout(updateCounter, speed);\n          }\n        };\n\n        // Start the counter\n        updateCounter();\n        ['start', 'end', 'speed', 'direction'].forEach(traitName => {\n          component.getTrait(traitName).on('change:value', e => {\n            console.log(component.getTrait(traitName).get('value'), 'vv');\n\n            //  start = component.getTrait('start').get('value');\n            //  end = component.getTrait('end').get('value');\n            //  speed = component.getTrait('speed').get('value');\n            //  direction = component.getTrait('direction').get('value');\n            // console.log('Start:', start, 'End:', end, 'Speed:', speed, 'Direction:', direction);\n\n            // console.log('xxx',e)\n            // Reset the counter and update based on the new trait values\n            const startInput = component.getTrait('start').get('value');\n            const endInput = component.getTrait('end').get('value');\n            const speedInput = component.getTrait('speed').get('value');\n            const directionInput = component.getTrait('direction').get('value');\n            counterElement.innerHTML = component.getTrait('start').get('value');\n            console.log(component.getTrait(traitName).get('value'), traitName);\n            if (editor) {\n              const component = editor.getSelected();\n              if (component && component.is('number-counter')) {\n                console.log(startInput);\n                component.getTrait('start').set('default', startInput);\n                component.getTrait('end').set('default', endInput);\n                component.getTrait('speed').set('default', speedInput);\n                component.getTrait('direction').set('default', directionInput);\n                console.log(component.getTrait('start').get('default'), 'startgettrait');\n                start = component.getTrait('start').get('default');\n                end = component.getTrait('end').get('default');\n                speed = component.getTrait('speed').get('default');\n                direction = component.getTrait('direction').get('default');\n                updateCounter();\n              }\n            }\n          });\n        });\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"gjs\",\n      style: {\n        height: '500px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"blocks\",\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n};\n_s(GrapesJSEditor, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = GrapesJSEditor;\nexport default GrapesJSEditor;\n\n// const GrapesJSEditor: React.FC = () => {\n//   useEffect(() => {\n//     const editor = grapesjs.init({\n//       container: '#gjs',\n//       fromElement: true,\n//       storageManager: {\n//         autosave: true,\n//         type: 'local',\n//         stepsBeforeSave: 1,\n//       },\n//       plugins: ['gjs-blocks-basic'], // Example: Basic Blocks plugin\n//       blockManager: {\n//         appendTo: '#blocks',\n//         blocks: [\n//           {\n//             id: 'number-counter',\n//             label: 'NumberCounter',\n//             attributes: { class: 'fa fa-clock-o' },\n//             content: '<div data-gjs-type=\"number-counter\">0</div>',\n//           },\n//         ],\n//       },\n//     });\n\n//     // Define the NumberCounter component and its logic\n//     editor.DomComponents.addType('number-counter', {\n//       model: {\n//         defaults: {\n//           tagName: 'div',\n//           content: '0',\n//           attributes: { class: 'number-counter' },\n//           start: 0,\n//           end: 100,\n//           speed: 1000,\n//           direction: 'up',\n//         },\n//       },\n//       init() {\n//         this.updateContent();\n//       },\n//       updated(prop, value) {\n//         if (prop === 'start' || prop === 'end' || prop === 'speed' || prop === 'direction') {\n//           this.updateContent();\n//         }\n//       },\n//       updateContent() {\n//         const { start, end, speed, direction } = this.get('attributes');\n//         this.set('content', String(start));\n\n//         let current = start;\n//         const increment = direction === 'up' ? 1 : -1;\n//         const interval = speed / Math.abs(end - start);\n\n//         const update = () => {\n//           current += increment;\n//           this.set('content', String(current));\n//           if ((direction === 'up' && current <= end) || (direction === 'down' && current >= end)) {\n//             setTimeout(update, interval);\n//           }\n//         };\n\n//         setTimeout(update, interval);\n//       },\n//     });\n\n//     // Add a trait for customizing the NumberCounter\n//     editor.TraitManager.addType('number-counter-options', {\n//       noValue: true,\n//       createInput: function (el) {\n//         const input = document.createElement('input');\n//         input.setAttribute('placeholder', 'Enter a value');\n//         input.value = el.innerHTML;\n//         return input;\n//       },\n//       onUpdate: function (el, value) {\n//         el.innerHTML = value;\n//       },\n//     });\n\n//     // Set traits for the NumberCounter component\n//     editor.on('component:selected', (component) => {\n//       if (component.is('number-counter')) {\n//         editor.TraitManager.addType('start', {\n//           type: 'number-counter-options',\n//           name: 'Start Value',\n//         });\n//         editor.TraitManager.addType('end', {\n//           type: 'number-counter-options',\n//           name: 'End Value',\n//         });\n//         editor.TraitManager.addType('speed', {\n//           type: 'number-counter-options',\n//           name: 'Speed',\n//         });\n//         editor.TraitManager.addType('direction', {\n//           type: 'number-counter-options',\n//           name: 'Direction',\n//         });\n//       }\n//     });\n\n//     // Add a blank canvas for users to start working on\n//     editor.setComponents('<div data-gjs-type=\"number-counter\">0</div>');\n//   }, []);\n\n//   return (\n//     <div>\n//       <div id=\"gjs\" style={{ height: '500px' }}></div>\n//       <div id=\"blocks\" style={{ display: 'none' }}></div>\n//     </div>\n//   );\n// };\n\n// export default GrapesJSEditor;\nvar _c;\n$RefreshReg$(_c, \"GrapesJSEditor\");","map":{"version":3,"names":["React","useEffect","grapesjs","jsxDEV","_jsxDEV","GrapesJSEditor","_s","editor","init","container","fromElement","storageManager","type","plugins","DomComponents","addType","model","defaults","traits","name","label","default","options","value","onUpdate","component","console","log","BlockManager","add","attributes","class","content","on","is","start","getTrait","get","end","speed","direction","counterElement","view","el","innerHTML","updateCounter","current","parseInt","setTimeout","forEach","traitName","e","startInput","endInput","speedInput","directionInput","getSelected","set","children","id","style","height","fileName","_jsxFileName","lineNumber","columnNumber","display","_c","$RefreshReg$"],"sources":["/Users/user/grapesjs-editor/src/NumberCounterBlock.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport grapesjs from 'grapesjs';\nimport 'grapesjs/dist/css/grapes.min.css';\n// GrapesJSEditor.tsx\n// import React, { useEffect } from 'react';\n// import grapesjs from 'grapesjs';\n\nconst GrapesJSEditor: React.FC = () => {\n  useEffect(() => {\n    const editor = grapesjs.init({\n      container: '#gjs',\n      fromElement: true,\n      storageManager: {\n        type: 'local',\n      },\n      plugins: ['gjs-blocks-basic'],\n    });\n\n    // Define the NumberCounter component\n    editor.DomComponents.addType('number-counter', {\n      model:{\n        defaults: {\n            traits: [\n              {\n                type: 'number',\n                name: 'start',\n                label: 'Start Value',\n                default: 0, // Default value for the trait\n              },\n              {\n                type: 'number',\n                name: 'end',\n                label: 'End Value',\n                default: 100, // Default value for the trait\n              },\n              {\n                type: 'number',\n                name: 'speed',\n                label: 'Speed (ms)',\n                default: 1000, // Default value for the trait\n              },\n              {\n                type: 'select',\n                name: 'direction',\n                label: 'Direction',\n                options: [\n                  { value: 'up', name: 'Up' },\n                  { value: 'down', name: 'Down' },\n                ],\n                default: 'up', // Default value for the trait\n              },\n            ],\n        }\n      },\n      // label: 'NumberCounter',\n      // attributes: { class: 'fa fa-clock-o' },\n      // content: '<div data-gjs-type=\"number-counter\" data-gjs-draggable=\"true\">0</div>',\n      onUpdate({ component,traits }) {\n      console.log('xxx',traits,component)\n      }\n    });\n    editor.BlockManager.add('number-counter-block', {\n      label: 'NumberCounter',\n      attributes: { class: 'fa fa-clock-o' },\n      content: '<div data-gjs-type=\"number-counter\" data-gjs-draggable=\"true\">0</div>',\n    });\n   \n    // editor.on('block:drag:start', (block) => { \n    //   console.log(block,'start')\n    //  });\n    //  editor.on('block:drag', (block) => { \n    //   console.log(block,'drag')\n    //   });\n    // const modal = editor.Modal;\n    // console.log(modal)\n      // editor.on('block:drag:stop', (component, block) => { \n      //   console.log(block,component.traits,'stop')\n      //   if (component.is('number-counter')) {\n      //     // Add your logic to set up the counter component here\n      //     // const start = component.getTrait('start').get('default');\n      //     // const end = component.getTrait('end').get('default');\n      //     // const speed = component.getTrait('speed').get('default');\n      //     // const direction = component.getTrait('direction').get('default');\n  \n      //     // // Your logic to set up the counter based on traits\n      //     // console.log('Start:', start, 'End:', end, 'Speed:', speed, 'Direction:', direction);\n      //   }\n      //  });\n\n\n    // // Handle the event after a component is dragged and dropped\n    // editor.on('component:drag:end', (component) => {\n    //   console.log(component)\n    //   if (component.is('number-counter')) {\n    //     // Add your logic to set up the counter component here\n    //     const start = component.getTrait('start').get('value');\n    //     const end = component.getTrait('end').get('value');\n    //     const speed = component.getTrait('speed').get('value');\n    //     const direction = component.getTrait('direction').get('value');\n\n    //     // Your logic to set up the counter based on traits\n    //     console.log('Start:', start, 'End:', end, 'Speed:', speed, 'Direction:', direction);\n    //   }\n    // });\n    \n\n    editor.on('block:drag:stop', (component) => {\n      if (component.is('number-counter')) {\n        // Get the trait values\n\n        let start = component.getTrait('start').get('default');\n        let end = component.getTrait('end').get('default');\n        let speed = component.getTrait('speed').get('default');\n        let direction = component.getTrait('direction').get('default');\n        console.log('Start:', start, 'End:', end, 'Speed:', speed, 'Direction:', direction);\n\n        // Access the counter component\n        const counterElement = component.view.el;\n\n        // Reset the counter's content\n        counterElement.innerHTML = direction === 'up'?start:end;\n\n        // Function to update the counter\n        const updateCounter = () => {\n          console.log('Start:', start, 'End:', end, 'Speed:', speed, 'Direction:', direction);\n\n          const current = parseInt(counterElement.innerHTML, 10);\n          console.log(current,'current')\n          if ((direction === 'up' && current < end) || (direction === 'down' && current > end)) {\n            counterElement.innerHTML = direction === 'up' ? current + 1 : current - 1;\n            setTimeout(updateCounter, speed);\n          }\n        };\n\n        // Start the counter\n        updateCounter();\n        ['start', 'end', 'speed', 'direction'].forEach((traitName) => {\n          component.getTrait(traitName).on('change:value', (e) => {\n            console.log(component.getTrait(traitName).get('value'),'vv')\n\n            //  start = component.getTrait('start').get('value');\n            //  end = component.getTrait('end').get('value');\n            //  speed = component.getTrait('speed').get('value');\n            //  direction = component.getTrait('direction').get('value');\n            // console.log('Start:', start, 'End:', end, 'Speed:', speed, 'Direction:', direction);\n            \n            // console.log('xxx',e)\n            // Reset the counter and update based on the new trait values\n            const startInput = component.getTrait('start').get('value');\n            const endInput = component.getTrait('end').get('value');\n            const speedInput = component.getTrait('speed').get('value');\n            const directionInput = component.getTrait('direction').get('value');\n\n            counterElement.innerHTML = component.getTrait('start').get('value');\n            console.log(component.getTrait(traitName).get('value'),traitName)\n\n\n            if (editor) {\n              const component = editor.getSelected();\n              if (component && component.is('number-counter')) {\n                console.log(startInput)\n                component.getTrait('start').set('default', startInput);\n                component.getTrait('end').set('default', endInput);\n                component.getTrait('speed').set('default', speedInput);\n                component.getTrait('direction').set('default', directionInput);\n\n                console.log(component.getTrait('start').get('default'),'startgettrait')\n                start = component.getTrait('start').get('default')\n                end = component.getTrait('end').get('default');\n                speed = component.getTrait('speed').get('default');\n                direction = component.getTrait('direction').get('default');\n                updateCounter();\n              }\n            }\n          });\n        });\n      }\n    });\n    \n  }, []);\n  \n\n  return (\n    <div>\n      <div id=\"gjs\" style={{ height: '500px' }}></div>\n      <div id=\"blocks\" style={{ display: 'none' }}></div>\n    </div>\n  );\n};\n\nexport default GrapesJSEditor;\n\n\n\n// const GrapesJSEditor: React.FC = () => {\n//   useEffect(() => {\n//     const editor = grapesjs.init({\n//       container: '#gjs',\n//       fromElement: true,\n//       storageManager: {\n//         autosave: true,\n//         type: 'local',\n//         stepsBeforeSave: 1,\n//       },\n//       plugins: ['gjs-blocks-basic'], // Example: Basic Blocks plugin\n//       blockManager: {\n//         appendTo: '#blocks',\n//         blocks: [\n//           {\n//             id: 'number-counter',\n//             label: 'NumberCounter',\n//             attributes: { class: 'fa fa-clock-o' },\n//             content: '<div data-gjs-type=\"number-counter\">0</div>',\n//           },\n//         ],\n//       },\n//     });\n\n//     // Define the NumberCounter component and its logic\n//     editor.DomComponents.addType('number-counter', {\n//       model: {\n//         defaults: {\n//           tagName: 'div',\n//           content: '0',\n//           attributes: { class: 'number-counter' },\n//           start: 0,\n//           end: 100,\n//           speed: 1000,\n//           direction: 'up',\n//         },\n//       },\n//       init() {\n//         this.updateContent();\n//       },\n//       updated(prop, value) {\n//         if (prop === 'start' || prop === 'end' || prop === 'speed' || prop === 'direction') {\n//           this.updateContent();\n//         }\n//       },\n//       updateContent() {\n//         const { start, end, speed, direction } = this.get('attributes');\n//         this.set('content', String(start));\n\n//         let current = start;\n//         const increment = direction === 'up' ? 1 : -1;\n//         const interval = speed / Math.abs(end - start);\n\n//         const update = () => {\n//           current += increment;\n//           this.set('content', String(current));\n//           if ((direction === 'up' && current <= end) || (direction === 'down' && current >= end)) {\n//             setTimeout(update, interval);\n//           }\n//         };\n\n//         setTimeout(update, interval);\n//       },\n//     });\n\n//     // Add a trait for customizing the NumberCounter\n//     editor.TraitManager.addType('number-counter-options', {\n//       noValue: true,\n//       createInput: function (el) {\n//         const input = document.createElement('input');\n//         input.setAttribute('placeholder', 'Enter a value');\n//         input.value = el.innerHTML;\n//         return input;\n//       },\n//       onUpdate: function (el, value) {\n//         el.innerHTML = value;\n//       },\n//     });\n\n//     // Set traits for the NumberCounter component\n//     editor.on('component:selected', (component) => {\n//       if (component.is('number-counter')) {\n//         editor.TraitManager.addType('start', {\n//           type: 'number-counter-options',\n//           name: 'Start Value',\n//         });\n//         editor.TraitManager.addType('end', {\n//           type: 'number-counter-options',\n//           name: 'End Value',\n//         });\n//         editor.TraitManager.addType('speed', {\n//           type: 'number-counter-options',\n//           name: 'Speed',\n//         });\n//         editor.TraitManager.addType('direction', {\n//           type: 'number-counter-options',\n//           name: 'Direction',\n//         });\n//       }\n//     });\n\n//     // Add a blank canvas for users to start working on\n//     editor.setComponents('<div data-gjs-type=\"number-counter\">0</div>');\n//   }, []);\n\n//   return (\n//     <div>\n//       <div id=\"gjs\" style={{ height: '500px' }}></div>\n//       <div id=\"blocks\" style={{ display: 'none' }}></div>\n//     </div>\n//   );\n// };\n\n// export default GrapesJSEditor;\n"],"mappings":"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;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEV,CAAC;AAAC3D,EAAA,CArLID,cAAwB;AAAA8D,EAAA,GAAxB9D,cAAwB;AAuL9B,eAAeA,cAAc;;AAI7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA8D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}