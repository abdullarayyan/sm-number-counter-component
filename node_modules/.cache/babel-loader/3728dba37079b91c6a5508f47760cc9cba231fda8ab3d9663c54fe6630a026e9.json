{"ast":null,"code":"var _jsxFileName = \"/Users/user/grapesjs-editor/src/GrapesJSEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport grapesjs from 'grapesjs';\nimport 'grapesjs/dist/css/grapes.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GrapesJSEditor = () => {\n  _s();\n  const editorRef = useRef(null);\n  useEffect(() => {\n    if (editorRef.current) {\n      const editor = grapesjs.init({\n        container: editorRef.current,\n        storageManager: {\n          autoload: false\n        } // Disable auto-loading of blocks\n      });\n\n      // Define the Number Counter block\n      // Define the Number Counter block\n      editor.Blocks.add('number-counter', {\n        label: 'Number Counter',\n        attributes: {\n          class: 'fa fa-clock-o'\n        },\n        content: {\n          type: 'number-counter',\n          components: '<div class=\"number-counter\">0</div>'\n        },\n        category: 'Basic',\n        customData: {\n          start: 0,\n          end: 100,\n          direction: 'up',\n          speed: 1000 // Default speed in milliseconds\n        },\n\n        render: ({\n          el\n        }) => {\n          let count = el.dataset.start;\n          const end = el.dataset.end;\n          const direction = el.dataset.direction;\n          const speed = el.dataset.speed;\n          const interval = setInterval(() => {\n            if (direction === 'up' && count < end || direction === 'down' && count > end) {\n              el.innerText = count;\n              count = direction === 'up' ? parseInt(count) + 1 : parseInt(count) - 1;\n            } else {\n              clearInterval(interval);\n            }\n          }, speed);\n        }\n      });\n      editor.Panels.addPanel({\n        id: 'number-counter-panel',\n        visible: true,\n        buttons: [{\n          id: 'set-start-end',\n          label: 'Set Start and End',\n          command: 'set-start-end',\n          context: 'number-counter'\n        }, {\n          id: 'set-direction',\n          label: 'Set Direction',\n          command: 'set-direction',\n          context: 'number-counter'\n        }, {\n          id: 'set-speed',\n          label: 'Set Speed (ms)',\n          // Add a label for the speed input\n          command: 'set-speed',\n          context: 'number-counter'\n        }]\n      });\n\n      //   // Add customization options to the panel\n      //   editor.Panels.addPanel({\n      //     id: 'number-counter-panel',\n      //     visible: true,\n      //     buttons: [\n      //       {\n      //         id: 'set-start-end',\n      //         label: 'Set Start and End',\n      //         command: 'set-start-end',\n      //         context: 'number-counter',\n      //       },\n      //       {\n      //         id: 'set-direction',\n      //         label: 'Set Direction',\n      //         command: 'set-direction',\n      //         context: 'number-counter',\n      //       },\n      //       {\n      //         id: 'set-speed',\n      //         label: 'Set Speed',\n      //         command: 'set-speed',\n      //         context: 'number-counter',\n      //       },\n      //     ],\n      //   });\n\n      // Add commands for customization\n      //   editor.Commands.add('set-start-end', {\n      //     run: (editor, sender) => {\n      //       const selected = editor.getSelected();\n      //       if (selected) {\n      //         const start = prompt('Enter Start Number:', selected.getAttribute('data-start'));\n      //         const end = prompt('Enter End Number:', selected.getAttribute('data-end'));\n      //         if (start !== null && end !== null) {\n      //           selected.setAttribute('data-start', start);\n      //           selected.setAttribute('data-end', end);\n      //           editor.Modal.close();\n      //         }\n      //       }\n      //     },\n      //   });\n\n      //   editor.Commands.add('set-direction', {\n      //     run: (editor, sender) => {\n      //       const selected = editor.getSelected();\n      //       if (selected) {\n      //         const direction = prompt('Enter Direction (up or down):', selected.getAttribute('data-direction'));\n      //         if (direction !== null && (direction === 'up' || direction === 'down')) {\n      //           selected.setAttribute('data-direction', direction);\n      //           editor.Modal.close();\n      //         }\n      //       }\n      //     },\n      //   });\n\n      //   editor.Commands.add('set-speed', {\n      //     run: (editor, sender) => {\n      //       const selected = editor.getSelected();\n      //       if (selected) {\n      //         const speed = prompt('Enter Speed (milliseconds):', selected.getAttribute('data-speed'));\n      //         if (speed !== null) {\n      //           selected.setAttribute('data-speed', speed);\n      //           editor.Modal.close();\n      //         }\n      //       }\n      //     },\n      //   });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: editorRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 10\n  }, this);\n};\n_s(GrapesJSEditor, \"FXGU5sRik9TpAO5B+Yli91RwFDk=\");\n_c = GrapesJSEditor;\nexport default GrapesJSEditor;\nvar _c;\n$RefreshReg$(_c, \"GrapesJSEditor\");","map":{"version":3,"names":["React","useEffect","useRef","grapesjs","jsxDEV","_jsxDEV","GrapesJSEditor","_s","editorRef","current","editor","init","container","storageManager","autoload","Blocks","add","label","attributes","class","content","type","components","category","customData","start","end","direction","speed","render","el","count","dataset","interval","setInterval","innerText","parseInt","clearInterval","Panels","addPanel","id","visible","buttons","command","context","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/user/grapesjs-editor/src/GrapesJSEditor.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport grapesjs from 'grapesjs';\nimport 'grapesjs/dist/css/grapes.min.css';\n\nconst GrapesJSEditor = () => {\n  const editorRef = useRef(null);\n\n  useEffect(() => {\n    if (editorRef.current) {\n      const editor = grapesjs.init({\n        container: editorRef.current,\n        storageManager: { autoload: false }, // Disable auto-loading of blocks\n      });\n\n      // Define the Number Counter block\n     // Define the Number Counter block\neditor.Blocks.add('number-counter', {\n    label: 'Number Counter',\n    attributes: { class: 'fa fa-clock-o' },\n    content: {\n      type: 'number-counter',\n      components: '<div class=\"number-counter\">0</div>',\n    },\n    category: 'Basic',\n    customData: {\n      start: 0,\n      end: 100,\n      direction: 'up',\n      speed: 1000, // Default speed in milliseconds\n    },\n    render: ({ el }) => {\n        let count = el.dataset.start;\n        const end = el.dataset.end;\n        const direction = el.dataset.direction;\n        const speed = el.dataset.speed;\n        const interval = setInterval(() => {\n          if ((direction === 'up' && count < end) || (direction === 'down' && count > end)) {\n            el.innerText = count;\n            count = direction === 'up' ? parseInt(count) + 1 : parseInt(count) - 1;\n          } else {\n            clearInterval(interval);\n          }\n        }, speed);\n      },\n      \n  });\n  \n  editor.Panels.addPanel({\n    id: 'number-counter-panel',\n    visible: true,\n    buttons: [\n      {\n        id: 'set-start-end',\n        label: 'Set Start and End',\n        command: 'set-start-end',\n        context: 'number-counter',\n      },\n      {\n        id: 'set-direction',\n        label: 'Set Direction',\n        command: 'set-direction',\n        context: 'number-counter',\n      },\n      {\n        id: 'set-speed',\n        label: 'Set Speed (ms)', // Add a label for the speed input\n        command: 'set-speed',\n        context: 'number-counter',\n      },\n    ],\n  });\n  \n\n    //   // Add customization options to the panel\n    //   editor.Panels.addPanel({\n    //     id: 'number-counter-panel',\n    //     visible: true,\n    //     buttons: [\n    //       {\n    //         id: 'set-start-end',\n    //         label: 'Set Start and End',\n    //         command: 'set-start-end',\n    //         context: 'number-counter',\n    //       },\n    //       {\n    //         id: 'set-direction',\n    //         label: 'Set Direction',\n    //         command: 'set-direction',\n    //         context: 'number-counter',\n    //       },\n    //       {\n    //         id: 'set-speed',\n    //         label: 'Set Speed',\n    //         command: 'set-speed',\n    //         context: 'number-counter',\n    //       },\n    //     ],\n    //   });\n\n      // Add commands for customization\n    //   editor.Commands.add('set-start-end', {\n    //     run: (editor, sender) => {\n    //       const selected = editor.getSelected();\n    //       if (selected) {\n    //         const start = prompt('Enter Start Number:', selected.getAttribute('data-start'));\n    //         const end = prompt('Enter End Number:', selected.getAttribute('data-end'));\n    //         if (start !== null && end !== null) {\n    //           selected.setAttribute('data-start', start);\n    //           selected.setAttribute('data-end', end);\n    //           editor.Modal.close();\n    //         }\n    //       }\n    //     },\n    //   });\n\n    //   editor.Commands.add('set-direction', {\n    //     run: (editor, sender) => {\n    //       const selected = editor.getSelected();\n    //       if (selected) {\n    //         const direction = prompt('Enter Direction (up or down):', selected.getAttribute('data-direction'));\n    //         if (direction !== null && (direction === 'up' || direction === 'down')) {\n    //           selected.setAttribute('data-direction', direction);\n    //           editor.Modal.close();\n    //         }\n    //       }\n    //     },\n    //   });\n\n    //   editor.Commands.add('set-speed', {\n    //     run: (editor, sender) => {\n    //       const selected = editor.getSelected();\n    //       if (selected) {\n    //         const speed = prompt('Enter Speed (milliseconds):', selected.getAttribute('data-speed'));\n    //         if (speed !== null) {\n    //           selected.setAttribute('data-speed', speed);\n    //           editor.Modal.close();\n    //         }\n    //       }\n    //     },\n    //   });\n    }\n  }, []);\n\n  return <div ref={editorRef}></div>;\n};\n\nexport default GrapesJSEditor;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,QAAQ,MAAM,UAAU;AAC/B,OAAO,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,SAAS,GAAGN,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,IAAIO,SAAS,CAACC,OAAO,EAAE;MACrB,MAAMC,MAAM,GAAGP,QAAQ,CAACQ,IAAI,CAAC;QAC3BC,SAAS,EAAEJ,SAAS,CAACC,OAAO;QAC5BI,cAAc,EAAE;UAAEC,QAAQ,EAAE;QAAM,CAAC,CAAE;MACvC,CAAC,CAAC;;MAEF;MACD;MACLJ,MAAM,CAACK,MAAM,CAACC,GAAG,CAAC,gBAAgB,EAAE;QAChCC,KAAK,EAAE,gBAAgB;QACvBC,UAAU,EAAE;UAAEC,KAAK,EAAE;QAAgB,CAAC;QACtCC,OAAO,EAAE;UACPC,IAAI,EAAE,gBAAgB;UACtBC,UAAU,EAAE;QACd,CAAC;QACDC,QAAQ,EAAE,OAAO;QACjBC,UAAU,EAAE;UACVC,KAAK,EAAE,CAAC;UACRC,GAAG,EAAE,GAAG;UACRC,SAAS,EAAE,IAAI;UACfC,KAAK,EAAE,IAAI,CAAE;QACf,CAAC;;QACDC,MAAM,EAAEA,CAAC;UAAEC;QAAG,CAAC,KAAK;UAChB,IAAIC,KAAK,GAAGD,EAAE,CAACE,OAAO,CAACP,KAAK;UAC5B,MAAMC,GAAG,GAAGI,EAAE,CAACE,OAAO,CAACN,GAAG;UAC1B,MAAMC,SAAS,GAAGG,EAAE,CAACE,OAAO,CAACL,SAAS;UACtC,MAAMC,KAAK,GAAGE,EAAE,CAACE,OAAO,CAACJ,KAAK;UAC9B,MAAMK,QAAQ,GAAGC,WAAW,CAAC,MAAM;YACjC,IAAKP,SAAS,KAAK,IAAI,IAAII,KAAK,GAAGL,GAAG,IAAMC,SAAS,KAAK,MAAM,IAAII,KAAK,GAAGL,GAAI,EAAE;cAChFI,EAAE,CAACK,SAAS,GAAGJ,KAAK;cACpBA,KAAK,GAAGJ,SAAS,KAAK,IAAI,GAAGS,QAAQ,CAACL,KAAK,CAAC,GAAG,CAAC,GAAGK,QAAQ,CAACL,KAAK,CAAC,GAAG,CAAC;YACxE,CAAC,MAAM;cACLM,aAAa,CAACJ,QAAQ,CAAC;YACzB;UACF,CAAC,EAAEL,KAAK,CAAC;QACX;MAEJ,CAAC,CAAC;MAEFlB,MAAM,CAAC4B,MAAM,CAACC,QAAQ,CAAC;QACrBC,EAAE,EAAE,sBAAsB;QAC1BC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE,CACP;UACEF,EAAE,EAAE,eAAe;UACnBvB,KAAK,EAAE,mBAAmB;UAC1B0B,OAAO,EAAE,eAAe;UACxBC,OAAO,EAAE;QACX,CAAC,EACD;UACEJ,EAAE,EAAE,eAAe;UACnBvB,KAAK,EAAE,eAAe;UACtB0B,OAAO,EAAE,eAAe;UACxBC,OAAO,EAAE;QACX,CAAC,EACD;UACEJ,EAAE,EAAE,WAAW;UACfvB,KAAK,EAAE,gBAAgB;UAAE;UACzB0B,OAAO,EAAE,WAAW;UACpBC,OAAO,EAAE;QACX,CAAC;MAEL,CAAC,CAAC;;MAGA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEE;MACF;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOvC,OAAA;IAAKwC,GAAG,EAAErC;EAAU;IAAAsC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACpC,CAAC;AAAC1C,EAAA,CA5IID,cAAc;AAAA4C,EAAA,GAAd5C,cAAc;AA8IpB,eAAeA,cAAc;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}