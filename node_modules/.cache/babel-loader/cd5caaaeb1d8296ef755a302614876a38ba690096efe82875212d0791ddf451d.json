{"ast":null,"code":"var _jsxFileName = \"/Users/user/grapesjs-editor/src/NumberCounterBlock.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport grapesjs from 'grapesjs';\nimport 'grapesjs/dist/css/grapes.min.css';\n// import React, { useEffect } from 'react';\n// import grapesjs from 'grapesjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GrapesJSEditor = () => {\n  _s();\n  useEffect(() => {\n    grapesjs.init({\n      container: '#gjs',\n      fromElement: true,\n      storageManager: {\n        autosave: true,\n        type: 'local',\n        stepsBeforeSave: 1\n      },\n      plugins: ['gjs-blocks-basic'],\n      // Example: Basic Blocks plugin\n      blockManager: {\n        appendTo: '#blocks',\n        blocks: [{\n          id: 'number-counter',\n          label: 'NumberCounter',\n          attributes: {\n            class: 'fa fa-clock-o'\n          },\n          content: '<div data-gjs-type=\"number-counter\">0</div>'\n        }]\n      }\n    });\n\n    // Define the NumberCounter component and its logic\n    grapesjs.plugins.add('number-counter', editor => {\n      editor.DomComponents.addType('number-counter', {\n        model: {\n          defaults: {\n            tagName: 'div',\n            content: '0',\n            attributes: {\n              class: 'number-counter'\n            },\n            start: 0,\n            end: 100,\n            speed: 1000,\n            direction: 'up'\n          }\n        },\n        init() {\n          this.updateContent();\n        },\n        updated(prop, value) {\n          if (prop === 'start' || prop === 'end' || prop === 'speed' || prop === 'direction') {\n            this.updateContent();\n          }\n        },\n        updateContent() {\n          const {\n            start,\n            end,\n            speed,\n            direction\n          } = this.get('attributes');\n          this.set('content', String(start));\n          let current = start;\n          const increment = direction === 'up' ? 1 : -1;\n          const interval = speed / Math.abs(end - start);\n          const update = () => {\n            current += increment;\n            this.set('content', String(current));\n            if (direction === 'up' && current <= end || direction === 'down' && current >= end) {\n              setTimeout(update, interval);\n            }\n          };\n          setTimeout(update, interval);\n        }\n      });\n\n      // Add a trait for customizing the NumberCounter\n      editor.TraitManager.addType('number-counter-options', {\n        noValue: true,\n        createInput(el) {\n          const input = document.createElement('input');\n          input.setAttribute('placeholder', 'Enter a value');\n          input.value = el.innerHTML;\n          return input;\n        },\n        onUpdate(el, value) {\n          el.innerHTML = value;\n        }\n      });\n    });\n\n    // Add a blank canvas for users to start working on\n    editor.setComponents('<div data-gjs-type=\"number-counter\">0</div>');\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"gjs\",\n      style: {\n        height: '500px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"blocks\",\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(GrapesJSEditor, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = GrapesJSEditor;\nexport default GrapesJSEditor;\n\n// const GrapesJSEditor: React.FC = () => {\n//   useEffect(() => {\n//     const editor = grapesjs.init({\n//       container: '#gjs',\n//       fromElement: true,\n//       storageManager: {\n//         autosave: true,\n//         type: 'local',\n//         stepsBeforeSave: 1,\n//       },\n//       plugins: ['gjs-blocks-basic'], // Example: Basic Blocks plugin\n//       blockManager: {\n//         appendTo: '#blocks',\n//         blocks: [\n//           {\n//             id: 'number-counter',\n//             label: 'NumberCounter',\n//             attributes: { class: 'fa fa-clock-o' },\n//             content: '<div data-gjs-type=\"number-counter\">0</div>',\n//           },\n//         ],\n//       },\n//     });\n\n//     // Define the NumberCounter component and its logic\n//     editor.DomComponents.addType('number-counter', {\n//       model: {\n//         defaults: {\n//           tagName: 'div',\n//           content: '0',\n//           attributes: { class: 'number-counter' },\n//           start: 0,\n//           end: 100,\n//           speed: 1000,\n//           direction: 'up',\n//         },\n//       },\n//       init() {\n//         this.updateContent();\n//       },\n//       updated(prop, value) {\n//         if (prop === 'start' || prop === 'end' || prop === 'speed' || prop === 'direction') {\n//           this.updateContent();\n//         }\n//       },\n//       updateContent() {\n//         const { start, end, speed, direction } = this.get('attributes');\n//         this.set('content', String(start));\n\n//         let current = start;\n//         const increment = direction === 'up' ? 1 : -1;\n//         const interval = speed / Math.abs(end - start);\n\n//         const update = () => {\n//           current += increment;\n//           this.set('content', String(current));\n//           if ((direction === 'up' && current <= end) || (direction === 'down' && current >= end)) {\n//             setTimeout(update, interval);\n//           }\n//         };\n\n//         setTimeout(update, interval);\n//       },\n//     });\n\n//     // Add a trait for customizing the NumberCounter\n//     editor.TraitManager.addType('number-counter-options', {\n//       noValue: true,\n//       createInput: function (el) {\n//         const input = document.createElement('input');\n//         input.setAttribute('placeholder', 'Enter a value');\n//         input.value = el.innerHTML;\n//         return input;\n//       },\n//       onUpdate: function (el, value) {\n//         el.innerHTML = value;\n//       },\n//     });\n\n//     // Set traits for the NumberCounter component\n//     editor.on('component:selected', (component) => {\n//       if (component.is('number-counter')) {\n//         editor.TraitManager.addType('start', {\n//           type: 'number-counter-options',\n//           name: 'Start Value',\n//         });\n//         editor.TraitManager.addType('end', {\n//           type: 'number-counter-options',\n//           name: 'End Value',\n//         });\n//         editor.TraitManager.addType('speed', {\n//           type: 'number-counter-options',\n//           name: 'Speed',\n//         });\n//         editor.TraitManager.addType('direction', {\n//           type: 'number-counter-options',\n//           name: 'Direction',\n//         });\n//       }\n//     });\n\n//     // Add a blank canvas for users to start working on\n//     editor.setComponents('<div data-gjs-type=\"number-counter\">0</div>');\n//   }, []);\n\n//   return (\n//     <div>\n//       <div id=\"gjs\" style={{ height: '500px' }}></div>\n//       <div id=\"blocks\" style={{ display: 'none' }}></div>\n//     </div>\n//   );\n// };\n\n// export default GrapesJSEditor;\nvar _c;\n$RefreshReg$(_c, \"GrapesJSEditor\");","map":{"version":3,"names":["React","useEffect","grapesjs","jsxDEV","_jsxDEV","GrapesJSEditor","_s","init","container","fromElement","storageManager","autosave","type","stepsBeforeSave","plugins","blockManager","appendTo","blocks","id","label","attributes","class","content","add","editor","DomComponents","addType","model","defaults","tagName","start","end","speed","direction","updateContent","updated","prop","value","get","set","String","current","increment","interval","Math","abs","update","setTimeout","TraitManager","noValue","createInput","el","input","document","createElement","setAttribute","innerHTML","onUpdate","setComponents","children","style","height","fileName","_jsxFileName","lineNumber","columnNumber","display","_c","$RefreshReg$"],"sources":["/Users/user/grapesjs-editor/src/NumberCounterBlock.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport grapesjs from 'grapesjs';\nimport 'grapesjs/dist/css/grapes.min.css';\n// import React, { useEffect } from 'react';\n// import grapesjs from 'grapesjs';\n\nconst GrapesJSEditor: React.FC = () => {\n  useEffect(() => {\n    grapesjs.init({\n      container: '#gjs',\n      fromElement: true,\n      storageManager: {\n        autosave: true,\n        type: 'local',\n        stepsBeforeSave: 1,\n      },\n      plugins: ['gjs-blocks-basic'], // Example: Basic Blocks plugin\n      blockManager: {\n        appendTo: '#blocks',\n        blocks: [\n          {\n            id: 'number-counter',\n            label: 'NumberCounter',\n            attributes: { class: 'fa fa-clock-o' },\n            content: '<div data-gjs-type=\"number-counter\">0</div>',\n          },\n        ],\n      },\n    });\n\n    // Define the NumberCounter component and its logic\n    grapesjs.plugins.add('number-counter', (editor) => {\n      editor.DomComponents.addType('number-counter', {\n        model: {\n          defaults: {\n            tagName: 'div',\n            content: '0',\n            attributes: { class: 'number-counter' },\n            start: 0,\n            end: 100,\n            speed: 1000,\n            direction: 'up',\n          },\n        },\n        init() {\n          this.updateContent();\n        },\n        updated(prop, value) {\n          if (prop === 'start' || prop === 'end' || prop === 'speed' || prop === 'direction') {\n            this.updateContent();\n          }\n        },\n        updateContent() {\n          const { start, end, speed, direction } = this.get('attributes');\n          this.set('content', String(start));\n\n          let current = start;\n          const increment = direction === 'up' ? 1 : -1;\n          const interval = speed / Math.abs(end - start);\n\n          const update = () => {\n            current += increment;\n            this.set('content', String(current));\n            if ((direction === 'up' && current <= end) || (direction === 'down' && current >= end)) {\n              setTimeout(update, interval);\n            }\n          };\n\n          setTimeout(update, interval);\n        },\n      });\n\n      // Add a trait for customizing the NumberCounter\n      editor.TraitManager.addType('number-counter-options', {\n        noValue: true,\n        createInput(el) {\n          const input = document.createElement('input');\n          input.setAttribute('placeholder', 'Enter a value');\n          input.value = el.innerHTML;\n          return input;\n        },\n        onUpdate(el, value) {\n          el.innerHTML = value;\n        },\n      });\n    });\n\n    // Add a blank canvas for users to start working on\n    editor.setComponents('<div data-gjs-type=\"number-counter\">0</div>');\n  }, []);\n\n  return (\n    <div>\n      <div id=\"gjs\" style={{ height: '500px' }}></div>\n      <div id=\"blocks\" style={{ display: 'none' }}></div>\n    </div>\n  );\n};\n\nexport default GrapesJSEditor;\n\n\n// const GrapesJSEditor: React.FC = () => {\n//   useEffect(() => {\n//     const editor = grapesjs.init({\n//       container: '#gjs',\n//       fromElement: true,\n//       storageManager: {\n//         autosave: true,\n//         type: 'local',\n//         stepsBeforeSave: 1,\n//       },\n//       plugins: ['gjs-blocks-basic'], // Example: Basic Blocks plugin\n//       blockManager: {\n//         appendTo: '#blocks',\n//         blocks: [\n//           {\n//             id: 'number-counter',\n//             label: 'NumberCounter',\n//             attributes: { class: 'fa fa-clock-o' },\n//             content: '<div data-gjs-type=\"number-counter\">0</div>',\n//           },\n//         ],\n//       },\n//     });\n\n//     // Define the NumberCounter component and its logic\n//     editor.DomComponents.addType('number-counter', {\n//       model: {\n//         defaults: {\n//           tagName: 'div',\n//           content: '0',\n//           attributes: { class: 'number-counter' },\n//           start: 0,\n//           end: 100,\n//           speed: 1000,\n//           direction: 'up',\n//         },\n//       },\n//       init() {\n//         this.updateContent();\n//       },\n//       updated(prop, value) {\n//         if (prop === 'start' || prop === 'end' || prop === 'speed' || prop === 'direction') {\n//           this.updateContent();\n//         }\n//       },\n//       updateContent() {\n//         const { start, end, speed, direction } = this.get('attributes');\n//         this.set('content', String(start));\n\n//         let current = start;\n//         const increment = direction === 'up' ? 1 : -1;\n//         const interval = speed / Math.abs(end - start);\n\n//         const update = () => {\n//           current += increment;\n//           this.set('content', String(current));\n//           if ((direction === 'up' && current <= end) || (direction === 'down' && current >= end)) {\n//             setTimeout(update, interval);\n//           }\n//         };\n\n//         setTimeout(update, interval);\n//       },\n//     });\n\n//     // Add a trait for customizing the NumberCounter\n//     editor.TraitManager.addType('number-counter-options', {\n//       noValue: true,\n//       createInput: function (el) {\n//         const input = document.createElement('input');\n//         input.setAttribute('placeholder', 'Enter a value');\n//         input.value = el.innerHTML;\n//         return input;\n//       },\n//       onUpdate: function (el, value) {\n//         el.innerHTML = value;\n//       },\n//     });\n\n//     // Set traits for the NumberCounter component\n//     editor.on('component:selected', (component) => {\n//       if (component.is('number-counter')) {\n//         editor.TraitManager.addType('start', {\n//           type: 'number-counter-options',\n//           name: 'Start Value',\n//         });\n//         editor.TraitManager.addType('end', {\n//           type: 'number-counter-options',\n//           name: 'End Value',\n//         });\n//         editor.TraitManager.addType('speed', {\n//           type: 'number-counter-options',\n//           name: 'Speed',\n//         });\n//         editor.TraitManager.addType('direction', {\n//           type: 'number-counter-options',\n//           name: 'Direction',\n//         });\n//       }\n//     });\n\n//     // Add a blank canvas for users to start working on\n//     editor.setComponents('<div data-gjs-type=\"number-counter\">0</div>');\n//   }, []);\n\n//   return (\n//     <div>\n//       <div id=\"gjs\" style={{ height: '500px' }}></div>\n//       <div id=\"blocks\" style={{ display: 'none' }}></div>\n//     </div>\n//   );\n// };\n\n// export default GrapesJSEditor;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,QAAQ,MAAM,UAAU;AAC/B,OAAO,kCAAkC;AACzC;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,cAAwB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrCL,SAAS,CAAC,MAAM;IACdC,QAAQ,CAACK,IAAI,CAAC;MACZC,SAAS,EAAE,MAAM;MACjBC,WAAW,EAAE,IAAI;MACjBC,cAAc,EAAE;QACdC,QAAQ,EAAE,IAAI;QACdC,IAAI,EAAE,OAAO;QACbC,eAAe,EAAE;MACnB,CAAC;MACDC,OAAO,EAAE,CAAC,kBAAkB,CAAC;MAAE;MAC/BC,YAAY,EAAE;QACZC,QAAQ,EAAE,SAAS;QACnBC,MAAM,EAAE,CACN;UACEC,EAAE,EAAE,gBAAgB;UACpBC,KAAK,EAAE,eAAe;UACtBC,UAAU,EAAE;YAAEC,KAAK,EAAE;UAAgB,CAAC;UACtCC,OAAO,EAAE;QACX,CAAC;MAEL;IACF,CAAC,CAAC;;IAEF;IACApB,QAAQ,CAACY,OAAO,CAACS,GAAG,CAAC,gBAAgB,EAAGC,MAAM,IAAK;MACjDA,MAAM,CAACC,aAAa,CAACC,OAAO,CAAC,gBAAgB,EAAE;QAC7CC,KAAK,EAAE;UACLC,QAAQ,EAAE;YACRC,OAAO,EAAE,KAAK;YACdP,OAAO,EAAE,GAAG;YACZF,UAAU,EAAE;cAAEC,KAAK,EAAE;YAAiB,CAAC;YACvCS,KAAK,EAAE,CAAC;YACRC,GAAG,EAAE,GAAG;YACRC,KAAK,EAAE,IAAI;YACXC,SAAS,EAAE;UACb;QACF,CAAC;QACD1B,IAAIA,CAAA,EAAG;UACL,IAAI,CAAC2B,aAAa,CAAC,CAAC;QACtB,CAAC;QACDC,OAAOA,CAACC,IAAI,EAAEC,KAAK,EAAE;UACnB,IAAID,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,KAAK,IAAIA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,WAAW,EAAE;YAClF,IAAI,CAACF,aAAa,CAAC,CAAC;UACtB;QACF,CAAC;QACDA,aAAaA,CAAA,EAAG;UACd,MAAM;YAAEJ,KAAK;YAAEC,GAAG;YAAEC,KAAK;YAAEC;UAAU,CAAC,GAAG,IAAI,CAACK,GAAG,CAAC,YAAY,CAAC;UAC/D,IAAI,CAACC,GAAG,CAAC,SAAS,EAAEC,MAAM,CAACV,KAAK,CAAC,CAAC;UAElC,IAAIW,OAAO,GAAGX,KAAK;UACnB,MAAMY,SAAS,GAAGT,SAAS,KAAK,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;UAC7C,MAAMU,QAAQ,GAAGX,KAAK,GAAGY,IAAI,CAACC,GAAG,CAACd,GAAG,GAAGD,KAAK,CAAC;UAE9C,MAAMgB,MAAM,GAAGA,CAAA,KAAM;YACnBL,OAAO,IAAIC,SAAS;YACpB,IAAI,CAACH,GAAG,CAAC,SAAS,EAAEC,MAAM,CAACC,OAAO,CAAC,CAAC;YACpC,IAAKR,SAAS,KAAK,IAAI,IAAIQ,OAAO,IAAIV,GAAG,IAAME,SAAS,KAAK,MAAM,IAAIQ,OAAO,IAAIV,GAAI,EAAE;cACtFgB,UAAU,CAACD,MAAM,EAAEH,QAAQ,CAAC;YAC9B;UACF,CAAC;UAEDI,UAAU,CAACD,MAAM,EAAEH,QAAQ,CAAC;QAC9B;MACF,CAAC,CAAC;;MAEF;MACAnB,MAAM,CAACwB,YAAY,CAACtB,OAAO,CAAC,wBAAwB,EAAE;QACpDuB,OAAO,EAAE,IAAI;QACbC,WAAWA,CAACC,EAAE,EAAE;UACd,MAAMC,KAAK,GAAGC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;UAC7CF,KAAK,CAACG,YAAY,CAAC,aAAa,EAAE,eAAe,CAAC;UAClDH,KAAK,CAACf,KAAK,GAAGc,EAAE,CAACK,SAAS;UAC1B,OAAOJ,KAAK;QACd,CAAC;QACDK,QAAQA,CAACN,EAAE,EAAEd,KAAK,EAAE;UAClBc,EAAE,CAACK,SAAS,GAAGnB,KAAK;QACtB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACAb,MAAM,CAACkC,aAAa,CAAC,6CAA6C,CAAC;EACrE,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEtD,OAAA;IAAAuD,QAAA,gBACEvD,OAAA;MAAKc,EAAE,EAAC,KAAK;MAAC0C,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAQ;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAChD7D,OAAA;MAAKc,EAAE,EAAC,QAAQ;MAAC0C,KAAK,EAAE;QAAEM,OAAO,EAAE;MAAO;IAAE;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEV,CAAC;AAAC3D,EAAA,CA3FID,cAAwB;AAAA8D,EAAA,GAAxB9D,cAAwB;AA6F9B,eAAeA,cAAc;;AAG7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA8D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}