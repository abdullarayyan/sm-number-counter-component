{"ast":null,"code":"import React, { useEffect, useRef } from 'react';\nimport grapesjs from 'grapesjs';\nimport 'grapesjs/dist/css/grapes.min.css';\n\n// const NumberCounterEditor = () => {\n//   const editorRef = useRef(null);\n\n//   useEffect(() => {\n//     if (editorRef.current) {\n//       const editor = grapesjs.init({\n//         container: editorRef.current,\n//         storageManager: { autoload: false },\n//         // Add any other configuration options as needed\n//       });\n\n//       // Define the Number Counter block\n//       editor.Blocks.add('number-counter', {\n//         label: 'Number Counter',\n//         attributes: { class: 'fa fa-clock-o' },\n//         content: '<div class=\"number-counter\">0</div>',\n//         category: 'Basic',\n//         render: ({ el }) => {\n//           const customData = el.getAttribute('data-custom-data');\n//           if (customData) {\n//             const { start, end, direction, speed } = JSON.parse(customData);\n//             let count = start;\n\n//             const interval = setInterval(() => {\n//               if (direction === 'up' && count < end) {\n//                 count++;\n//               } else if (direction === 'down' && count > end) {\n//                 count--;\n//               } else {\n//                 clearInterval(interval);\n//               }\n//               el.innerText = count.toString();\n//             }, speed);\n//           }\n//         },\n//       });\n\n//       // Define Component Settings for the Number Counter block\n//       editor.TraitManager.addType('number-counter-props', {\n//         name: 'Start',\n//         label: 'Start Number',\n//         type: 'number',\n//         changeProp: 1,\n//       });\n\n//       editor.TraitManager.addType('number-counter-props', {\n//         name: 'End',\n//         label: 'End Number',\n//         type: 'number',\n//         changeProp: 1,\n//       });\n\n//       editor.TraitManager.addType('number-counter-props', {\n//         name: 'Direction',\n//         label: 'Direction (up or down)',\n//         type: 'select',\n//         options: [\n//           { value: 'up', name: 'Up' },\n//           { value: 'down', name: 'Down' },\n//         ],\n//         changeProp: 1,\n//       });\n\n//       editor.TraitManager.addType('number-counter-props', {\n//         name: 'Speed',\n//         label: 'Speed (milliseconds)',\n//         type: 'number',\n//         changeProp: 1,\n//       });\n\n//       // Add Component Settings panel for the Number Counter block\n//       editor.Panels.addPanel({\n//         id: 'number-counter-props-panel',\n//         visible: false,\n//         buttons: [\n//           {\n//             id: 'open-props',\n//             active: true,\n//             label: 'Properties',\n//             command: 'show-props',\n//             context: 'number-counter',\n//           },\n//         ],\n//       });\n\n//       // Add a command to show the Component Settings panel\n//       editor.Commands.add('show-props', {\n//         run(editor, sender) {\n//           editor.Panels.getPanel('number-counter-props-panel').set('active', 1);\n//         },\n//       });\n//     }\n//   }, []);\n\n//   return <div ref={editorRef} />;\n// };\nconst editor = grapesjs.init({\n  container: '#gjs',\n  storageManager: {\n    autoload: false\n  } // Disable auto-loading of blocks\n});\n\n// Define the Number Counter block\neditor.Blocks.add('number-counter', {\n  label: 'Number Counter',\n  attributes: {\n    class: 'fa fa-clock-o'\n  },\n  content: '<div class=\"number-counter\">0</div>',\n  category: 'Basic',\n  customData: {\n    start: 0,\n    end: 100,\n    direction: 'up',\n    speed: 1000\n  },\n  render: ({\n    el\n  }) => {\n    const customData = el.getAttribute('data-custom-data');\n    if (customData) {\n      const {\n        start,\n        end,\n        direction,\n        speed\n      } = JSON.parse(customData);\n      let count = start;\n      const interval = setInterval(() => {\n        if (direction === 'up' && count < end) {\n          count++;\n        } else if (direction === 'down' && count > end) {\n          count--;\n        } else {\n          clearInterval(interval);\n        }\n        el.innerText = count.toString();\n      }, speed);\n    }\n  }\n});\n\n// Event listener for block rendering\neditor.on('block:rendered', block => {\n  if (block && block.get('type') === 'number-counter') {\n    // Custom logic when the Number Counter block is rendered\n    console.log('Number Counter block rendered:', block);\n  }\n});\n\n// Event listener for attribute updates\neditor.on('change:attributes', block => {\n  if (block && block.get('type') === 'number-counter') {\n    const changedAttributes = block.getChangedAttributes();\n    if (changedAttributes.hasOwnProperty('start')) {\n      // Handle changes to the 'start' attribute\n      console.log('Start attribute updated to:', changedAttributes.start);\n    }\n    if (changedAttributes.hasOwnProperty('end')) {\n      // Handle changes to the 'end' attribute\n      console.log('End attribute updated to:', changedAttributes.end);\n    }\n    if (changedAttributes.hasOwnProperty('direction')) {\n      // Handle changes to the 'direction' attribute\n      console.log('Direction attribute updated to:', changedAttributes.direction);\n    }\n    if (changedAttributes.hasOwnProperty('speed')) {\n      // Handle changes to the 'speed' attribute\n      console.log('Speed attribute updated to:', changedAttributes.speed);\n    }\n  }\n});\n\n// Create a Number Counter block\neditor.Blocks.add('number-counter');\nexport default NumberCounterEditor;","map":{"version":3,"names":["React","useEffect","useRef","grapesjs","editor","init","container","storageManager","autoload","Blocks","add","label","attributes","class","content","category","customData","start","end","direction","speed","render","el","getAttribute","JSON","parse","count","interval","setInterval","clearInterval","innerText","toString","on","block","get","console","log","changedAttributes","getChangedAttributes","hasOwnProperty","NumberCounterEditor"],"sources":["/Users/user/grapesjs-editor/src/GrapesJSEditor.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport grapesjs from 'grapesjs';\nimport 'grapesjs/dist/css/grapes.min.css';\n\n// const NumberCounterEditor = () => {\n//   const editorRef = useRef(null);\n\n//   useEffect(() => {\n//     if (editorRef.current) {\n//       const editor = grapesjs.init({\n//         container: editorRef.current,\n//         storageManager: { autoload: false },\n//         // Add any other configuration options as needed\n//       });\n\n//       // Define the Number Counter block\n//       editor.Blocks.add('number-counter', {\n//         label: 'Number Counter',\n//         attributes: { class: 'fa fa-clock-o' },\n//         content: '<div class=\"number-counter\">0</div>',\n//         category: 'Basic',\n//         render: ({ el }) => {\n//           const customData = el.getAttribute('data-custom-data');\n//           if (customData) {\n//             const { start, end, direction, speed } = JSON.parse(customData);\n//             let count = start;\n\n//             const interval = setInterval(() => {\n//               if (direction === 'up' && count < end) {\n//                 count++;\n//               } else if (direction === 'down' && count > end) {\n//                 count--;\n//               } else {\n//                 clearInterval(interval);\n//               }\n//               el.innerText = count.toString();\n//             }, speed);\n//           }\n//         },\n//       });\n\n//       // Define Component Settings for the Number Counter block\n//       editor.TraitManager.addType('number-counter-props', {\n//         name: 'Start',\n//         label: 'Start Number',\n//         type: 'number',\n//         changeProp: 1,\n//       });\n\n//       editor.TraitManager.addType('number-counter-props', {\n//         name: 'End',\n//         label: 'End Number',\n//         type: 'number',\n//         changeProp: 1,\n//       });\n\n//       editor.TraitManager.addType('number-counter-props', {\n//         name: 'Direction',\n//         label: 'Direction (up or down)',\n//         type: 'select',\n//         options: [\n//           { value: 'up', name: 'Up' },\n//           { value: 'down', name: 'Down' },\n//         ],\n//         changeProp: 1,\n//       });\n\n//       editor.TraitManager.addType('number-counter-props', {\n//         name: 'Speed',\n//         label: 'Speed (milliseconds)',\n//         type: 'number',\n//         changeProp: 1,\n//       });\n\n//       // Add Component Settings panel for the Number Counter block\n//       editor.Panels.addPanel({\n//         id: 'number-counter-props-panel',\n//         visible: false,\n//         buttons: [\n//           {\n//             id: 'open-props',\n//             active: true,\n//             label: 'Properties',\n//             command: 'show-props',\n//             context: 'number-counter',\n//           },\n//         ],\n//       });\n\n//       // Add a command to show the Component Settings panel\n//       editor.Commands.add('show-props', {\n//         run(editor, sender) {\n//           editor.Panels.getPanel('number-counter-props-panel').set('active', 1);\n//         },\n//       });\n//     }\n//   }, []);\n\n//   return <div ref={editorRef} />;\n// };\nconst editor = grapesjs.init({\n    container: '#gjs',\n    storageManager: { autoload: false }, // Disable auto-loading of blocks\n  });\n  \n  // Define the Number Counter block\n  editor.Blocks.add('number-counter', {\n    label: 'Number Counter',\n    attributes: { class: 'fa fa-clock-o' },\n    content: '<div class=\"number-counter\">0</div>',\n    category: 'Basic',\n    customData: {\n      start: 0,\n      end: 100,\n      direction: 'up',\n      speed: 1000,\n    },\n    render: ({ el }) => {\n      const customData = el.getAttribute('data-custom-data');\n      if (customData) {\n        const { start, end, direction, speed } = JSON.parse(customData);\n        let count = start;\n  \n        const interval = setInterval(() => {\n          if (direction === 'up' && count < end) {\n            count++;\n          } else if (direction === 'down' && count > end) {\n            count--;\n          } else {\n            clearInterval(interval);\n          }\n          el.innerText = count.toString();\n        }, speed);\n      }\n    },\n  });\n  \n  // Event listener for block rendering\n  editor.on('block:rendered', (block) => {\n    if (block && block.get('type') === 'number-counter') {\n      // Custom logic when the Number Counter block is rendered\n      console.log('Number Counter block rendered:', block);\n    }\n  });\n  \n  // Event listener for attribute updates\n  editor.on('change:attributes', (block) => {\n    if (block && block.get('type') === 'number-counter') {\n      const changedAttributes = block.getChangedAttributes();\n  \n      if (changedAttributes.hasOwnProperty('start')) {\n        // Handle changes to the 'start' attribute\n        console.log('Start attribute updated to:', changedAttributes.start);\n      }\n  \n      if (changedAttributes.hasOwnProperty('end')) {\n        // Handle changes to the 'end' attribute\n        console.log('End attribute updated to:', changedAttributes.end);\n      }\n  \n      if (changedAttributes.hasOwnProperty('direction')) {\n        // Handle changes to the 'direction' attribute\n        console.log('Direction attribute updated to:', changedAttributes.direction);\n      }\n  \n      if (changedAttributes.hasOwnProperty('speed')) {\n        // Handle changes to the 'speed' attribute\n        console.log('Speed attribute updated to:', changedAttributes.speed);\n      }\n    }\n  });\n  \n  // Create a Number Counter block\n  editor.Blocks.add('number-counter');\n\nexport default NumberCounterEditor;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}