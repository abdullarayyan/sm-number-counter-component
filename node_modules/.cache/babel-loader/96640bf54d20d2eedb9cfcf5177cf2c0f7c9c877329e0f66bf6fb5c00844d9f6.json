{"ast":null,"code":"var _jsxFileName = \"/Users/user/grapesjs-editor/src/GrapesJSEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport grapesjs from 'grapesjs';\nimport 'grapesjs/dist/css/grapes.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NumberCounterEditor = () => {\n  _s();\n  const editorRef = useRef(null);\n  useEffect(() => {\n    if (editorRef.current) {\n      const editor = grapesjs.init({\n        container: editorRef.current,\n        storageManager: {\n          autoload: false\n        } // Disable auto-loading of blocks\n      });\n\n      // Define component settings\n      const componentSettings = {\n        start: {\n          type: 'number',\n          label: 'Start Number',\n          default: 0\n        },\n        end: {\n          type: 'number',\n          label: 'End Number',\n          default: 100\n        },\n        direction: {\n          type: 'select',\n          label: 'Direction',\n          default: 'up',\n          options: [{\n            value: 'up',\n            name: 'Up'\n          }, {\n            value: 'down',\n            name: 'Down'\n          }]\n        },\n        speed: {\n          type: 'number',\n          label: 'Counting Speed (milliseconds)',\n          default: 1000\n        }\n      };\n\n      // Register the block with component settings\n      editor.Blocks.add('number-counter', {\n        label: 'Number Counter',\n        attributes: {\n          class: 'fa fa-clock-o'\n        },\n        content: '<div class=\"number-counter\">0</div>',\n        category: 'Basic',\n        traits: componentSettings,\n        // Register component settings\n        render: ({\n          el,\n          model\n        }) => {\n          const start = model.get('start');\n          const end = model.get('end');\n          const direction = model.get('direction');\n          const speed = model.get('speed');\n          let count = start;\n          const interval = setInterval(() => {\n            if (direction === 'up' && count < end) {\n              count++;\n            } else if (direction === 'down' && count > end) {\n              count--;\n            } else {\n              clearInterval(interval);\n            }\n            el.innerText = count.toString();\n          }, speed);\n        }\n      });\n\n      // Enable the Trait Manager\n      editor.Panels.addPanel({\n        id: 'traits-panel',\n        el: '.panel__right',\n        visible: true\n      });\n      editor.TraitManager.init();\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: editorRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 10\n  }, this);\n};\n_s(NumberCounterEditor, \"FXGU5sRik9TpAO5B+Yli91RwFDk=\");\n_c = NumberCounterEditor;\nexport default NumberCounterEditor;\nvar _c;\n$RefreshReg$(_c, \"NumberCounterEditor\");","map":{"version":3,"names":["React","useRef","useEffect","grapesjs","jsxDEV","_jsxDEV","NumberCounterEditor","_s","editorRef","current","editor","init","container","storageManager","autoload","componentSettings","start","type","label","default","end","direction","options","value","name","speed","Blocks","add","attributes","class","content","category","traits","render","el","model","get","count","interval","setInterval","clearInterval","innerText","toString","Panels","addPanel","id","visible","TraitManager","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/user/grapesjs-editor/src/GrapesJSEditor.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport grapesjs from 'grapesjs';\nimport 'grapesjs/dist/css/grapes.min.css';\n\nconst NumberCounterEditor = () => {\n  const editorRef = useRef(null);\n\n  useEffect(() => {\n    if (editorRef.current) {\n      const editor = grapesjs.init({\n        container: editorRef.current,\n        storageManager: { autoload: false }, // Disable auto-loading of blocks\n      });\n\n      // Define component settings\n      const componentSettings = {\n        start: {\n          type: 'number',\n          label: 'Start Number',\n          default: 0,\n        },\n        end: {\n          type: 'number',\n          label: 'End Number',\n          default: 100,\n        },\n        direction: {\n          type: 'select',\n          label: 'Direction',\n          default: 'up',\n          options: [\n            { value: 'up', name: 'Up' },\n            { value: 'down', name: 'Down' },\n          ],\n        },\n        speed: {\n          type: 'number',\n          label: 'Counting Speed (milliseconds)',\n          default: 1000,\n        },\n      };\n\n      // Register the block with component settings\n      editor.Blocks.add('number-counter', {\n        label: 'Number Counter',\n        attributes: { class: 'fa fa-clock-o' },\n        content: '<div class=\"number-counter\">0</div>',\n        category: 'Basic',\n        traits: componentSettings, // Register component settings\n        render: ({ el, model }) => {\n          const start = model.get('start');\n          const end = model.get('end');\n          const direction = model.get('direction');\n          const speed = model.get('speed');\n\n          let count = start;\n\n          const interval = setInterval(() => {\n            if (direction === 'up' && count < end) {\n              count++;\n            } else if (direction === 'down' && count > end) {\n              count--;\n            } else {\n              clearInterval(interval);\n            }\n            el.innerText = count.toString();\n          }, speed);\n        },\n      });\n\n      // Enable the Trait Manager\n      editor.Panels.addPanel({\n        id: 'traits-panel',\n        el: '.panel__right',\n        visible: true,\n      });\n\n      editor.TraitManager.init();\n    }\n  }, []);\n\n  return <div ref={editorRef} />;\n};\n\nexport default NumberCounterEditor;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}