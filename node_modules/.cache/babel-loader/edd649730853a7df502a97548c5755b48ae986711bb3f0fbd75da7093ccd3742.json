{"ast":null,"code":"var _jsxFileName = \"/Users/user/grapesjs-editor/src/NumberCounterBlock.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport grapesjs from 'grapesjs';\nimport 'grapesjs/dist/css/grapes.min.css';\n// GrapesJSEditor.js\n// import React, { useEffect } from 'react';\n// import grapesjs from 'grapesjs';\n// import 'grapesjs-blocks-basic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GrapesJSEditor = () => {\n  _s();\n  useEffect(() => {\n    const editor = grapesjs.init({\n      container: '#gjs',\n      fromElement: true,\n      storageManager: {\n        type: 'local'\n      },\n      plugins: ['gjs-blocks-basic']\n    });\n    editor.DomComponents.addType('input', {\n      isComponent: el => el.tagName == 'INPUT',\n      model: {\n        defaults: {\n          traits: [\n          // Strings are automatically converted to text types\n          'name',\n          // Same as: { type: 'text', name: 'name' }\n          'placeholder', {\n            type: 'select',\n            // Type of the trait\n            label: 'Type',\n            // The label you will see in Settings\n            name: 'type',\n            // The name of the attribute/property to use on component\n            options: [{\n              id: 'text',\n              name: 'Text'\n            }, {\n              id: 'email',\n              name: 'Email'\n            }, {\n              id: 'password',\n              name: 'Password'\n            }, {\n              id: 'number',\n              name: 'Number'\n            }]\n          }, {\n            type: 'checkbox',\n            name: 'required'\n          }],\n          // As by default, traits are binded to attributes, so to define\n          // their initial value we can use attributes\n          attributes: {\n            type: 'text',\n            required: true\n          }\n        }\n      }\n    });\n    // Define the NumberCounter component\n    editor.DomComponents.addType('number-counter', {\n      model: {\n        defaults: {\n          tagName: 'div',\n          attributes: {\n            class: 'number-counter'\n          }\n        },\n        traits: [\n        // Strings are automatically converted to text types\n        'name',\n        // Same as: { type: 'text', name: 'name' }\n        'placeholder', {\n          type: 'select',\n          // Type of the trait\n          label: 'Type',\n          // The label you will see in Settings\n          name: 'type',\n          // The name of the attribute/property to use on component\n          options: [{\n            id: 'text',\n            name: 'Text'\n          }, {\n            id: 'email',\n            name: 'Email'\n          }, {\n            id: 'password',\n            name: 'Password'\n          }, {\n            id: 'number',\n            name: 'Number'\n          }]\n        }, {\n          type: 'checkbox',\n          name: 'required'\n        }]\n      },\n      init() {\n        this.addAttributes({\n          start: {\n            type: 'number',\n            default: 0\n          },\n          end: {\n            type: 'number',\n            default: 100\n          },\n          speed: {\n            type: 'number',\n            default: 1000\n          },\n          direction: {\n            type: 'select',\n            options: ['up', 'down'],\n            default: 'up'\n          }\n        });\n        this.updateContent();\n      },\n      updateContent() {\n        const {\n          start,\n          end,\n          speed,\n          direction\n        } = this.getAttributes();\n        // Your logic to update the content based on start, end, speed, and direction\n      }\n    });\n\n    // Add a block for the NumberCounter component\n    editor.BlockManager.add('number-counter-block', {\n      label: 'NumberCounter',\n      attributes: {\n        class: 'fa fa-clock-o'\n      },\n      content: '<div data-gjs-type=\"number-counter\" data-gjs-draggable=\"true\">0</div>'\n    });\n\n    // Add an asset to the Asset Manager for the NumberCounter component\n    editor.AssetManager.add('number-counter-asset', {\n      label: 'NumberCounter',\n      content: '<div data-gjs-type=\"number-counter\" data-gjs-draggable=\"true\">0</div>',\n      category: 'Components',\n      attributes: {\n        start: 0,\n        end: 100,\n        speed: 1000,\n        direction: 'up'\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"gjs\",\n      style: {\n        height: '500px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(GrapesJSEditor, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = GrapesJSEditor;\nexport default GrapesJSEditor;\n\n// const GrapesJSEditor: React.FC = () => {\n//   useEffect(() => {\n//     const editor = grapesjs.init({\n//       container: '#gjs',\n//       fromElement: true,\n//       storageManager: {\n//         autosave: true,\n//         type: 'local',\n//         stepsBeforeSave: 1,\n//       },\n//       plugins: ['gjs-blocks-basic'], // Example: Basic Blocks plugin\n//       blockManager: {\n//         appendTo: '#blocks',\n//         blocks: [\n//           {\n//             id: 'number-counter',\n//             label: 'NumberCounter',\n//             attributes: { class: 'fa fa-clock-o' },\n//             content: '<div data-gjs-type=\"number-counter\">0</div>',\n//           },\n//         ],\n//       },\n//     });\n\n//     // Define the NumberCounter component and its logic\n//     editor.DomComponents.addType('number-counter', {\n//       model: {\n//         defaults: {\n//           tagName: 'div',\n//           content: '0',\n//           attributes: { class: 'number-counter' },\n//           start: 0,\n//           end: 100,\n//           speed: 1000,\n//           direction: 'up',\n//         },\n//       },\n//       init() {\n//         this.updateContent();\n//       },\n//       updated(prop, value) {\n//         if (prop === 'start' || prop === 'end' || prop === 'speed' || prop === 'direction') {\n//           this.updateContent();\n//         }\n//       },\n//       updateContent() {\n//         const { start, end, speed, direction } = this.get('attributes');\n//         this.set('content', String(start));\n\n//         let current = start;\n//         const increment = direction === 'up' ? 1 : -1;\n//         const interval = speed / Math.abs(end - start);\n\n//         const update = () => {\n//           current += increment;\n//           this.set('content', String(current));\n//           if ((direction === 'up' && current <= end) || (direction === 'down' && current >= end)) {\n//             setTimeout(update, interval);\n//           }\n//         };\n\n//         setTimeout(update, interval);\n//       },\n//     });\n\n//     // Add a trait for customizing the NumberCounter\n//     editor.TraitManager.addType('number-counter-options', {\n//       noValue: true,\n//       createInput: function (el) {\n//         const input = document.createElement('input');\n//         input.setAttribute('placeholder', 'Enter a value');\n//         input.value = el.innerHTML;\n//         return input;\n//       },\n//       onUpdate: function (el, value) {\n//         el.innerHTML = value;\n//       },\n//     });\n\n//     // Set traits for the NumberCounter component\n//     editor.on('component:selected', (component) => {\n//       if (component.is('number-counter')) {\n//         editor.TraitManager.addType('start', {\n//           type: 'number-counter-options',\n//           name: 'Start Value',\n//         });\n//         editor.TraitManager.addType('end', {\n//           type: 'number-counter-options',\n//           name: 'End Value',\n//         });\n//         editor.TraitManager.addType('speed', {\n//           type: 'number-counter-options',\n//           name: 'Speed',\n//         });\n//         editor.TraitManager.addType('direction', {\n//           type: 'number-counter-options',\n//           name: 'Direction',\n//         });\n//       }\n//     });\n\n//     // Add a blank canvas for users to start working on\n//     editor.setComponents('<div data-gjs-type=\"number-counter\">0</div>');\n//   }, []);\n\n//   return (\n//     <div>\n//       <div id=\"gjs\" style={{ height: '500px' }}></div>\n//       <div id=\"blocks\" style={{ display: 'none' }}></div>\n//     </div>\n//   );\n// };\n\n// export default GrapesJSEditor;\nvar _c;\n$RefreshReg$(_c, \"GrapesJSEditor\");","map":{"version":3,"names":["React","useEffect","grapesjs","jsxDEV","_jsxDEV","GrapesJSEditor","_s","editor","init","container","fromElement","storageManager","type","plugins","DomComponents","addType","isComponent","el","tagName","model","defaults","traits","label","name","options","id","attributes","required","class","addAttributes","start","default","end","speed","direction","updateContent","getAttributes","BlockManager","add","content","AssetManager","category","children","style","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/user/grapesjs-editor/src/NumberCounterBlock.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport grapesjs from 'grapesjs';\nimport 'grapesjs/dist/css/grapes.min.css';\n// GrapesJSEditor.js\n// import React, { useEffect } from 'react';\n// import grapesjs from 'grapesjs';\n// import 'grapesjs-blocks-basic';\n\nconst GrapesJSEditor = () => {\n  useEffect(() => {\n    const editor = grapesjs.init({\n      container: '#gjs',\n      fromElement: true,\n      storageManager: {\n        type: 'local',\n      },\n      plugins: ['gjs-blocks-basic'],\n    });\n    editor.DomComponents.addType('input', {\n      isComponent: el => el.tagName == 'INPUT',\n      model: {\n        defaults: {\n          traits: [\n            // Strings are automatically converted to text types\n            'name', // Same as: { type: 'text', name: 'name' }\n            'placeholder',\n            {\n              type: 'select', // Type of the trait\n              label: 'Type', // The label you will see in Settings\n              name: 'type', // The name of the attribute/property to use on component\n              options: [\n                { id: 'text', name: 'Text'},\n                { id: 'email', name: 'Email'},\n                { id: 'password', name: 'Password'},\n                { id: 'number', name: 'Number'},\n              ]\n            }, {\n              type: 'checkbox',\n              name: 'required',\n          }],\n          // As by default, traits are binded to attributes, so to define\n          // their initial value we can use attributes\n          attributes: { type: 'text', required: true },\n        },\n      },\n  });\n    // Define the NumberCounter component\n    editor.DomComponents.addType('number-counter', {\n      model: {\n        defaults: {\n          tagName: 'div',\n          attributes: { class: 'number-counter' },\n        },\n        traits: [\n          // Strings are automatically converted to text types\n          'name', // Same as: { type: 'text', name: 'name' }\n          'placeholder',\n          {\n            type: 'select', // Type of the trait\n            label: 'Type', // The label you will see in Settings\n            name: 'type', // The name of the attribute/property to use on component\n            options: [\n              { id: 'text', name: 'Text'},\n              { id: 'email', name: 'Email'},\n              { id: 'password', name: 'Password'},\n              { id: 'number', name: 'Number'},\n            ]\n          }, {\n            type: 'checkbox',\n            name: 'required',\n        }],\n      },\n      init() {\n        this.addAttributes({\n          start: { type: 'number', default: 0 },\n          end: { type: 'number', default: 100 },\n          speed: { type: 'number', default: 1000 },\n          direction: { type: 'select', options: ['up', 'down'], default: 'up' },\n        });\n        this.updateContent();\n      },\n      updateContent() {\n        const { start, end, speed, direction } = this.getAttributes();\n        // Your logic to update the content based on start, end, speed, and direction\n      },\n    });\n\n    // Add a block for the NumberCounter component\n    editor.BlockManager.add('number-counter-block', {\n      label: 'NumberCounter',\n      attributes: { class: 'fa fa-clock-o' },\n      content: '<div data-gjs-type=\"number-counter\" data-gjs-draggable=\"true\">0</div>',\n    });\n\n    // Add an asset to the Asset Manager for the NumberCounter component\n    editor.AssetManager.add('number-counter-asset', {\n      label: 'NumberCounter',\n      content: '<div data-gjs-type=\"number-counter\" data-gjs-draggable=\"true\">0</div>',\n      category: 'Components',\n      attributes: {\n        start: 0,\n        end: 100,\n        speed: 1000,\n        direction: 'up',\n      },\n    });\n  }, []);\n\n  return (\n    <div>\n      <div id=\"gjs\" style={{ height: '500px' }}></div>\n    </div>\n  );\n};\n\nexport default GrapesJSEditor;\n\n\n// const GrapesJSEditor: React.FC = () => {\n//   useEffect(() => {\n//     const editor = grapesjs.init({\n//       container: '#gjs',\n//       fromElement: true,\n//       storageManager: {\n//         autosave: true,\n//         type: 'local',\n//         stepsBeforeSave: 1,\n//       },\n//       plugins: ['gjs-blocks-basic'], // Example: Basic Blocks plugin\n//       blockManager: {\n//         appendTo: '#blocks',\n//         blocks: [\n//           {\n//             id: 'number-counter',\n//             label: 'NumberCounter',\n//             attributes: { class: 'fa fa-clock-o' },\n//             content: '<div data-gjs-type=\"number-counter\">0</div>',\n//           },\n//         ],\n//       },\n//     });\n\n//     // Define the NumberCounter component and its logic\n//     editor.DomComponents.addType('number-counter', {\n//       model: {\n//         defaults: {\n//           tagName: 'div',\n//           content: '0',\n//           attributes: { class: 'number-counter' },\n//           start: 0,\n//           end: 100,\n//           speed: 1000,\n//           direction: 'up',\n//         },\n//       },\n//       init() {\n//         this.updateContent();\n//       },\n//       updated(prop, value) {\n//         if (prop === 'start' || prop === 'end' || prop === 'speed' || prop === 'direction') {\n//           this.updateContent();\n//         }\n//       },\n//       updateContent() {\n//         const { start, end, speed, direction } = this.get('attributes');\n//         this.set('content', String(start));\n\n//         let current = start;\n//         const increment = direction === 'up' ? 1 : -1;\n//         const interval = speed / Math.abs(end - start);\n\n//         const update = () => {\n//           current += increment;\n//           this.set('content', String(current));\n//           if ((direction === 'up' && current <= end) || (direction === 'down' && current >= end)) {\n//             setTimeout(update, interval);\n//           }\n//         };\n\n//         setTimeout(update, interval);\n//       },\n//     });\n\n//     // Add a trait for customizing the NumberCounter\n//     editor.TraitManager.addType('number-counter-options', {\n//       noValue: true,\n//       createInput: function (el) {\n//         const input = document.createElement('input');\n//         input.setAttribute('placeholder', 'Enter a value');\n//         input.value = el.innerHTML;\n//         return input;\n//       },\n//       onUpdate: function (el, value) {\n//         el.innerHTML = value;\n//       },\n//     });\n\n//     // Set traits for the NumberCounter component\n//     editor.on('component:selected', (component) => {\n//       if (component.is('number-counter')) {\n//         editor.TraitManager.addType('start', {\n//           type: 'number-counter-options',\n//           name: 'Start Value',\n//         });\n//         editor.TraitManager.addType('end', {\n//           type: 'number-counter-options',\n//           name: 'End Value',\n//         });\n//         editor.TraitManager.addType('speed', {\n//           type: 'number-counter-options',\n//           name: 'Speed',\n//         });\n//         editor.TraitManager.addType('direction', {\n//           type: 'number-counter-options',\n//           name: 'Direction',\n//         });\n//       }\n//     });\n\n//     // Add a blank canvas for users to start working on\n//     editor.setComponents('<div data-gjs-type=\"number-counter\">0</div>');\n//   }, []);\n\n//   return (\n//     <div>\n//       <div id=\"gjs\" style={{ height: '500px' }}></div>\n//       <div id=\"blocks\" style={{ display: 'none' }}></div>\n//     </div>\n//   );\n// };\n\n// export default GrapesJSEditor;\n"],"mappings":"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ACtBiB,OAAO,EAAE,uEAAuE;MAChFE,QAAQ,EAAE,YAAY;MACtBf,UAAU,EAAE;QACVI,KAAK,EAAE,CAAC;QACRE,GAAG,EAAE,GAAG;QACRC,KAAK,EAAE,IAAI;QACXC,SAAS,EAAE;MACb;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE9B,OAAA;IAAAsC,QAAA,eACEtC,OAAA;MAAKqB,EAAE,EAAC,KAAK;MAACkB,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAQ;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEV,CAAC;AAAC1C,EAAA,CAzGID,cAAc;AAAA4C,EAAA,GAAd5C,cAAc;AA2GpB,eAAeA,cAAc;;AAG7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}